[{"path":"https://robinhankin.github.io/lorentz/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin K. S. Hankin. Author, maintainer.","code":""},{"path":"https://robinhankin.github.io/lorentz/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hankin RK (2023). lorentz: Lorentz Transform Relativistic Physics. https://github.com/RobinHankin/lorentz, https://robinhankin.github.io/lorentz/.","code":"@Manual{,   title = {lorentz: The Lorentz Transform in Relativistic Physics},   author = {Robin K. S. Hankin},   year = {2023},   note = {https://github.com/RobinHankin/lorentz, https://robinhankin.github.io/lorentz/}, }"},{"path":[]},{"path":"https://robinhankin.github.io/lorentz/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"The Lorentz Transform in Relativistic Physics","text":"lorentz package furnishes R-centric functionality special relativity. Lorentz transformations four-vectors handled functionality stress energy tensor given. package deals four-momentum facilities dealing photons mirrors relativistic situations. detailed vignette provided package. original motivation package investigation (nonassociative) gyrogroup structure relativistic three-velocities Einsteinian velocity composition. Natural R idiom may used manipulate vectors three-velocities, although one must careful brackets.","code":""},{"path":"https://robinhankin.github.io/lorentz/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The Lorentz Transform in Relativistic Physics","text":"install recent stable version CRAN, use install.packages() R prompt: install current development version use devtools: load package use library():","code":"R> install.packages(\"lorentz\") R> devtools::install_github(\"RobinHankin/lorentz\") library(\"lorentz\")"},{"path":"https://robinhankin.github.io/lorentz/index.html","id":"the-lorentz-package-in-use","dir":"","previous_headings":"","what":"The lorentz package in use","title":"The Lorentz Transform in Relativistic Physics","text":"package furnishes natural R idiom working three-velocities, four-velocities, Lorentz transformations four--four matrices. Although natural units  used default, can changed. boost matrix can used transform arbitrary four-vectors: can also used transform four-velocities: classical parallelogram law addition velocities incorrect relativistic effects included. combine   terms successive boosts simply multiply boost matrices: note result depends order:","code":"u <- as.3vel(c(0.6,0,0))  # define a three-velocity, 0.6c to the right  u #> A vector of three-velocities (speed of light = 1) #>        x y z #> [1,] 0.6 0 0 as.4vel(u)    # convert to a four-velocity: #> A vector of four-velocities (speed of light = 1) #>         t    x y z #> [1,] 1.25 0.75 0 0 gam(u)  # calculate the gamma term #> [1] 1.25 B <- boost(u) # give the Lorentz transformation B #>       t     x y z #> t  1.25 -0.75 0 0 #> x -0.75  1.25 0 0 #> y  0.00  0.00 1 0 #> z  0.00  0.00 0 1 B %*% (1:4)  # Lorentz transform of an arbitrary four-vector #>    [,1] #> t -0.25 #> x  1.75 #> y  3.00 #> z  4.00 v <- as.4vel(c(0,0.7,-0.2)) B %*% t(v) #>        [,1] #> t  1.823312 #> x -1.093987 #> y  1.021055 #> z -0.291730 boost(u) %*% boost(v) #>           t     x          y          z #> t  1.823312 -0.75 -1.2763187  0.3646625 #> x -1.093987  1.25  0.7657912 -0.2187975 #> y -1.021055  0.00  1.4240348 -0.1211528 #> z  0.291730  0.00 -0.1211528  1.0346151 boost(v) %*% boost(u) #>            t          x          y          z #> t  1.8233124 -1.0939874 -1.0210549  0.2917300 #> x -0.7500000  1.2500000  0.0000000  0.0000000 #> y -1.2763187  0.7657912  1.4240348 -0.1211528 #> z  0.3646625 -0.2187975 -0.1211528  1.0346151"},{"path":"https://robinhankin.github.io/lorentz/index.html","id":"vectorization","dir":"","previous_headings":"","what":"Vectorization","title":"The Lorentz Transform in Relativistic Physics","text":"package fully vectorized can deal vectors whose entries three-velocities four-velocities:","code":"set.seed(0)  options(digits=3)  # generate 5 random three-velocities:  (u <- r3vel(5)) #> A vector of three-velocities (speed of light = 1) #>           x       y      z #> [1,]  0.230  0.0719  0.314 #> [2,] -0.311  0.4189 -0.277 #> [3,] -0.185  0.5099 -0.143 #> [4,] -0.739 -0.4641  0.129 #> [5,] -0.304 -0.2890  0.593  # calculate the gamma correction term:  gam(u) #> [1] 1.09 1.24 1.21 2.13 1.46  # add a velocity of 0.9c in the x-direction:  v <- as.3vel(c(0.9,0,0))  v+u #> A vector of three-velocities (speed of light = 1) #>          x      y      z #> [1,] 0.936  0.026  0.113 #> [2,] 0.818  0.253 -0.168 #> [3,] 0.858  0.267 -0.075 #> [4,] 0.480 -0.605  0.168 #> [5,] 0.820 -0.174  0.356  # convert u to a four-velocity:  as.4vel(u) #> A vector of four-velocities (speed of light = 1) #>         t      x       y      z #> [1,] 1.09  0.250  0.0783  0.341 #> [2,] 1.24 -0.385  0.5190 -0.343 #> [3,] 1.21 -0.223  0.6160 -0.173 #> [4,] 2.13 -1.571 -0.9862  0.273 #> [5,] 1.46 -0.443 -0.4209  0.864  # use four-velocities to effect the same transformation:  w <- as.4vel(u) %*% boost(-v)  as.3vel(w) #> A vector of three-velocities (speed of light = 1) #>          x      y      z #> [1,] 0.936  0.026  0.113 #> [2,] 0.818  0.253 -0.168 #> [3,] 0.858  0.267 -0.075 #> [4,] 0.480 -0.605  0.168 #> [5,] 0.820 -0.174  0.356"},{"path":"https://robinhankin.github.io/lorentz/index.html","id":"three-velocities","dir":"","previous_headings":"","what":"Three-velocities","title":"The Lorentz Transform in Relativistic Physics","text":"Three-velocites behave interesting counter-intuitive ways. three-velocity addition law given Ungar. can see velocity addition commutative: Observe difference u+v v+u “small” sense. Commutativity replaced gyrocommutatitivity: (, zero numerical accuracy)","code":"u <- as.3vel(c(0.2,0.4,0.1))   # single three-velocity  v <- r3vel(4,0.9)              # 4 random three-velocities with speed 0.9  w <- as.3vel(c(-0.5,0.1,0.3))  # single three-velocity u+v #> A vector of three-velocities (speed of light = 1) #>           x      y     z #> [1,]  0.702 -0.113 0.567 #> [2,] -0.679  0.580 0.102 #> [3,] -0.046  0.879 0.364 #> [4,]  0.312  0.407 0.788  v+u #> A vector of three-velocities (speed of light = 1) #>           x      y     z #> [1,]  0.624 -0.378 0.543 #> [2,] -0.823  0.358 0.045 #> [3,] -0.234  0.832 0.401 #> [4,]  0.228  0.190 0.892  (u+v)-(v+u) #> A vector of three-velocities (speed of light = 1) #>          x     y       z #> [1,] 0.243 0.506  0.1190 #> [2,] 0.201 0.490  0.1206 #> [3,] 0.503 0.245 -0.0519 #> [4,] 0.242 0.564 -0.1105 # Compare two different ways of calculating the same thing:  (u+v) - gyr(u,v,v+u)   #> A vector of three-velocities (speed of light = 1) #>              x         y         z #> [1,]  3.53e-15 -1.20e-15  2.89e-15 #> [2,]  2.89e-16 -3.18e-15 -1.08e-16 #> [3,] -4.26e-15  1.09e-13  4.67e-14 #> [4,]  1.67e-15  4.76e-16  1.91e-15 # The other way round:  (v+u) - gyr(v,u,u+v) #> A vector of three-velocities (speed of light = 1) #>             x         y         z #> [1,] 3.21e-15 -6.42e-16  2.89e-15 #> [2,] 3.76e-15 -1.73e-15 -2.53e-16 #> [3,] 1.47e-14 -4.07e-14 -2.03e-14 #> [4,] 9.05e-15  6.43e-15  3.24e-14"},{"path":"https://robinhankin.github.io/lorentz/index.html","id":"nonassociativity-of-three-velocities","dir":"","previous_headings":"","what":"Nonassociativity of three-velocities","title":"The Lorentz Transform in Relativistic Physics","text":"reasonable expect u+(v+w)==(u+v)+w. However, case: (, significant departure associativity). Associativity replaced gyroassociativity: (zero numerical accuracy).","code":"((u+v)+w) - (u+(v+w)) #> A vector of three-velocities (speed of light = 1) #>             x       y         z #> [1,]  0.00613  0.0794 -0.001467 #> [2,] -0.11096 -0.1508 -0.031226 #> [3,] -0.10748 -0.1022  0.000795 #> [4,] -0.05772 -0.0631 -0.007364 (u+(v+w)) - ((u+v)+gyr(u,v,w)) #> A vector of three-velocities (speed of light = 1) #>      x         y         z #> [1,] 0  8.16e-17 -6.53e-16 #> [2,] 0 -9.49e-16  0.00e+00 #> [3,] 0  3.21e-15  1.60e-15 #> [4,] 0  0.00e+00  0.00e+00  ((u+v)+w) - (u+(v+gyr(v,u,w))) #> A vector of three-velocities (speed of light = 1) #>              x         y         z #> [1,]  0.00e+00  4.03e-17 -1.29e-15 #> [2,] -1.81e-15  9.07e-16  0.00e+00 #> [3,]  0.00e+00  1.37e-14  5.48e-15 #> [4,]  0.00e+00 -1.84e-15 -1.84e-15"},{"path":"https://robinhankin.github.io/lorentz/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"The Lorentz Transform in Relativistic Physics","text":"concise reference . . Ungar 2006. Thomas precession: kinematic effect algebra Einstein’s velocity addition law. Comments “Deriving relativistic momentum energy: II, Three-dimensional case. European Journal Physics, 27:L17-L20","code":""},{"path":"https://robinhankin.github.io/lorentz/index.html","id":"further-information","dir":"","previous_headings":"","what":"Further information","title":"The Lorentz Transform in Relativistic Physics","text":"detail, see package vignette","code":"vignette(\"lorentz\")"},{"path":"https://robinhankin.github.io/lorentz/reference/Extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or replace parts of three-velocity — Extract.3vel","title":"Extract or replace parts of three-velocity — Extract.3vel","text":"Extract replace subsets three-velocities","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/Extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of three-velocity — Extract.3vel","text":"x three-vector index elements extract replace value replacement value","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/Extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract or replace parts of three-velocity — Extract.3vel","text":"methods () work expected: object class 3vel three-column matrix rows corresponding three-velocities; single argument interpreted row number. Salient use-cases u[1:5] <- u[1] u[1] <- 0. extract single component, pass second index: u[,1] returns x- component three-velocity. Extraction functions take drop argument, except x[] returns vec object. Currently, u[] returns u sure desirable.  Maybe return unclass(u) perhaps c(unclass(u)). Use idiom u[] <- x replace entries u elementwise.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/Extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract or replace parts of three-velocity — Extract.3vel","text":"","code":"u <- r3vel(10) u[1:4] #> A vector of three-velocities (speed of light = 1) #>                x          y          z #> [1,] -0.15762977 -0.3738983  0.3553684 #> [2,]  0.48300936  0.2107778  0.1337445 #> [3,]  0.05812769 -0.8094763  0.5130473 #> [4,]  0.58882210 -0.3628479 -0.5987006 u[5:6] <- 0  u[7:8] <- u[1]  u[,1] <- 0.1"},{"path":"https://robinhankin.github.io/lorentz/reference/Ops.3vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Ops Group Methods for 3vel objects — Ops.3vel","title":"Arithmetic Ops Group Methods for 3vel objects — Ops.3vel","text":"Arithmetic operations three-velocities","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/Ops.3vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Ops Group Methods for 3vel objects — Ops.3vel","text":"","code":"# S3 method for 3vel Ops(e1, e2) # S3 method for 4vel Ops(e1, e2) massage3(u,v) neg3(u) prod3(u,v=u) add3(u,v) dot3(v,r)"},{"path":"https://robinhankin.github.io/lorentz/reference/Ops.3vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Ops Group Methods for 3vel objects — Ops.3vel","text":"e1,e2,u,v Objects class “3vel”,     three-velocities r Scalar value circle-dot multiplication","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/Ops.3vec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic Ops Group Methods for 3vel objects — Ops.3vel","text":"function Ops.3vel() passes unary binary arithmetic   operators “+”, “-” “*”   appropriate specialist function. interesting operators “+”   “*”, passed add3() dot3()   respectively.  defined, following Ungar, : $$     \\mathbf{u}+\\mathbf{v} = \\frac{1}{1+\\mathbf{u}\\cdot\\mathbf{b}/c^2}     \\left\\{     \\mathbf{u} +     \\frac{1}{\\gamma_\\mathbf{u}}\\mathbf{v} +     \\frac{1}{c^2}\\frac{\\gamma_\\mathbf{u}}{1+\\gamma_\\mathbf{u}}     \\left(\\mathbf{u}\\cdot\\mathbf{v}\\right)\\mathbf{u}     \\right\\}   $$ $$     r\\odot\\mathbf{v} =     c\\tanh\\left(     r\\tanh^{-1}\\frac{\\left|\\left|\\mathbf{v}\\right|\\right|}{c}     \\right)\\frac{\\mathbf{v}}{\\left|\\left|\\mathbf{v}\\right|\\right|}   $$ \\(\\mathbf{u}\\) \\(\\mathbf{v}\\) three-vectors   \\(r\\) scalar.  Function dot3() special dispensation   zero velocity treat NA entries entirely   consistently. Arithmetic operations, executed via Ops.4vel(), defined   four-velocities. package designed natural R idiom may used three   velocity addition, see examples section.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/Ops.3vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic Ops Group Methods for 3vel objects — Ops.3vel","text":"Returns object class 3vel, except prod3() returns numeric vector.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/Ops.3vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic Ops Group Methods for 3vel objects — Ops.3vel","text":"","code":"u <- as.3vel(c(-0.7, 0.1,-0.1)) v <- as.3vel(c( 0.1, 0.2, 0.3)) w <- as.3vel(c( 0.5, 0.2,-0.3))  x <- r3vel(10)   # random three velocities y <- r3vel(10)   # random three velocities   u+v   # add3(u,v) #> A vector of three-velocities (speed of light = 1) #>              x         y         z #> [1,] -0.648977 0.2557545 0.1246803 u-v   # add3(u,neg3(v)) #> A vector of three-velocities (speed of light = 1) #>               x           y          z #> [1,] -0.7434641 -0.03267974 -0.2913943  -v    # neg3(v) #> A vector of three-velocities (speed of light = 1) #>         x    y    z #> [1,] -0.1 -0.2 -0.3  gyr(u,v,w) #> A vector of three-velocities (speed of light = 1) #>              x         y          z #> [1,] 0.5134003 0.2390541 -0.2434611  ## package is vectorized:   u+x #> A vector of three-velocities (speed of light = 1) #>                x           y           z #>  [1,] -0.8889786  0.22821761 -0.11885247 #>  [2,] -0.7106957 -0.23928579  0.01981252 #>  [3,] -0.5830157 -0.45568877 -0.17910662 #>  [4,] -0.7950919  0.30264689 -0.49071425 #>  [5,] -0.7288528 -0.15788963 -0.50334145 #>  [6,] -0.7660242  0.17728097 -0.47252596 #>  [7,] -0.8632466 -0.45953614  0.19282167 #>  [8,] -0.7867792  0.05947219 -0.06567523 #>  [9,] -0.3382368  0.01112118  0.70781755 #> [10,] -0.6087260  0.29198470  0.14337868 x+y #> A vector of three-velocities (speed of light = 1) #>                x           y           z #>  [1,] -0.6500685  0.35965724 -0.13815236 #>  [2,] -0.1883593 -0.63610156  0.73506413 #>  [3,]  0.7494810 -0.46731654  0.02719663 #>  [4,] -0.3581051  0.54210902 -0.70045792 #>  [5,]  0.4737807 -0.24770311 -0.72216742 #>  [6,]  0.3913279 -0.20019761  0.82494667 #>  [7,] -0.2635761 -0.84928929  0.45369705 #>  [8,]  0.1003413  0.13030052  0.17944925 #>  [9,]  0.2950598  0.09175515  0.39174180 #> [10,] -0.1062326 -0.14564463  0.22986467  f <- gyrfun(u,v) g <- gyrfun(v,u)  f(g(x)) - x    # should be zero by eqn10 #> A vector of three-velocities (speed of light = 1) #>                   x             y             z #>  [1,] -9.287884e-17  4.179548e-16  6.675666e-17 #>  [2,] -1.882090e-16  1.989477e-16  9.043076e-18 #>  [3,] -2.068904e-16  5.172259e-16  1.099105e-16 #>  [4,] -5.721994e-15  2.543108e-15 -5.510068e-15 #>  [5,] -5.777820e-16 -1.848902e-16 -1.848902e-16 #>  [6,]  6.536493e-16 -2.841953e-17  1.250459e-15 #>  [7,]  0.000000e+00  1.492472e-14 -7.462359e-15 #>  [8,] -1.266834e-16  2.601533e-16  4.682760e-17 #>  [9,] -1.124289e-15  2.555203e-16 -6.132487e-16 #> [10,] -3.570755e-16  2.112873e-17 -1.563526e-16 g(f(x)) - x #> A vector of three-velocities (speed of light = 1) #>                   x             y            z #>  [1,] -2.879244e-15  1.044887e-15 1.015862e-16 #>  [2,] -3.600275e-16  1.085169e-16 1.853831e-16 #>  [3,] -1.551678e-16  4.137808e-16 6.465324e-18 #>  [4,]  4.238514e-15 -3.390811e-15 6.357771e-15 #>  [5,] -3.081504e-16  4.930407e-16 4.930407e-16 #>  [6,] -5.683907e-16  3.126149e-16 3.978735e-16 #>  [7,] -9.327949e-15 -1.492472e-14 7.462359e-15 #>  [8,] -3.483793e-16  2.332331e-16 5.994838e-17 #>  [9,]  3.066244e-16  4.088325e-16 1.839746e-15 #> [10,] -6.359747e-16  4.648320e-17 2.112873e-17   (u+v) - f(v+u)                     # zero by eqn 10 #> A vector of three-velocities (speed of light = 1) #>                  x            y            z #> [1,] -6.132309e-16 1.951189e-16 1.672448e-16 (u+(v+w)) - ((u+v)+f(w))           # zero by eqn 11 #> A vector of three-velocities (speed of light = 1) #>                  x y             z #> [1,] -5.469679e-17 0 -5.469679e-18 ((u+v)+w) - (u+(v+g(w)))           # zero by eqn 11 #> A vector of three-velocities (speed of light = 1) #>                 x            y            z #> [1,] 3.951349e-16 -2.99021e-16 1.975675e-16   ## NB, R idiom is unambiguous.  But always always ALWAYS use brackets.  ## Ice report in lat 42.n to 41.25n Long 49w to long 50.30w saw much ## heavy pack ice and great number large icebergs also field ## ice.  Weather good clear  ## -u+v == (-u) + v == neg3(u) + v == add3(neg3(u),v)  ## u+v+w == (u+v)+w == add3(add3(u,v),w)"},{"path":"https://robinhankin.github.io/lorentz/reference/as.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce 3-vectors and 4-vectors to a matrix — as.matrix.3vel","title":"Coerce 3-vectors and 4-vectors to a matrix — as.matrix.3vel","text":"Coerce 3-vectors 4-vectors matrix.  convenience wrapper unclass()","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/as.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce 3-vectors and 4-vectors to a matrix — as.matrix.3vel","text":"","code":"# S3 method for 3vel as.matrix(x, ...) # S3 method for 4vel as.matrix(x, ...)"},{"path":"https://robinhankin.github.io/lorentz/reference/as.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce 3-vectors and 4-vectors to a matrix — as.matrix.3vel","text":"x Object class 3vel 4vel ... arguments (currently ignored)","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/as.matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce 3-vectors and 4-vectors to a matrix — as.matrix.3vel","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/as.matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce 3-vectors and 4-vectors to a matrix — as.matrix.3vel","text":"","code":"as.matrix(r3vel(5)) #>                x          y           z #> [1,]  0.06533205 -0.5289129  0.63566821 #> [2,] -0.37558854 -0.5749352 -0.43995279 #> [3,] -0.02011651  0.3723053  0.07738897 #> [4,]  0.51224100 -0.5634633  0.57591358 #> [5,]  0.37711870  0.1740391  0.54727614 as.matrix(r4vel(5)) #>             t          x          y          z #> [1,] 5.273302 -1.6611231 -3.4341732 -3.5006906 #> [2,] 1.565456 -0.7099663 -0.1895579  0.9542900 #> [3,] 1.094626  0.3278931 -0.1981308 -0.2267951 #> [4,] 1.070211 -0.2280141 -0.2039119  0.2275558 #> [5,] 1.857017 -1.0531450 -1.1489372 -0.1390703"},{"path":"https://robinhankin.github.io/lorentz/reference/boost.html","id":null,"dir":"Reference","previous_headings":"","what":"Lorentz transformations — boost","title":"Lorentz transformations — boost","text":"Lorentz transformations: boosts rotations","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/boost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lorentz transformations — boost","text":"","code":"boost(u=0) rot(u,v,space=TRUE) is.consistent.boost(L, give=FALSE, TOL=1e-10) is.consistent.boost.galilean(L, give=FALSE, TOL=1e-10) pureboost(L,include_sol=TRUE) orthog(L) pureboost.galilean(L, tidy=TRUE) orthog.galilean(L)"},{"path":"https://robinhankin.github.io/lorentz/reference/boost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lorentz transformations — boost","text":"u,v Three-velocities, coerced  class 3vel.      function boost(), u takes special default value     0, interpreted zero three velocity L Lorentz transform expressed \\(4\\times 4\\) matrix TOL Numerical tolerance give Boolean TRUE meaning return transformed     metric tensor (flat-space eta(); qv)     default FALSE meaning return whether matrix     consistent boost space Boolean, default TRUE meaning return just     spatial component rotation matrix FALSE     meaning return full \\(4\\times 4\\) matrix     transformation tidy pureboost.galilean(), Boolean default     TRUE meaning return “tidy” boost matrix     spatial components forced \\(3\\times 3\\) identity     matrix include_sol function pureboost(), Boolean     default TRUE meaning correctly account speed     light, FALSE meaning assume \\(c=1\\). See details","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/boost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lorentz transformations — boost","text":"Function boost() returns \\(4\\times 4\\) matrix; function rot() returns orthogonal matrix.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/boost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lorentz transformations — boost","text":"Arguments u,v coerced three-velocities. rotation-free Lorentz transformation known boost   (sometimes pure boost), expressed matrix form.  Pure   boost matrices symmetric \\(c=1\\).  Function boost(u)   returns \\(4\\times 4\\) matrix giving Lorentz transform   arbitrary three-velocity u. Boosts can successively applied regular matrix multiplication.   However, composing two successive pure boosts general   return pure boost matrix: product symmetric general.   Also note boost matrices commute.  resulting matrix   product represents Lorentz transform. possible decompose Lorentz transform \\(L\\) pure   boost spatial rotation.  Thus \\(L=OP\\) \\(O\\)   orthogonal matrix \\(P\\) pure boost matrix; returned   functions orthog() pureboost() respectively.     speed light equal 1, functions still work can   confusing. Functions pureboost.galilean() orthog.galilean()   Newtonian equivalents pureboost() orthog(),   intended used speed light infinite (causes   problems relativistic functions). noted , composition two pure Lorentz boosts   necessarily pure.  two successive boosts corresponding   \\(u\\) \\(v\\), composed boost may decomposed   pure boost boost(u+v) rotation rot(u,v). reason argument include_sol exists function   orthog() needs call pureboost() environment   pretend \\(c=1\\).","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/boost.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Lorentz transformations — boost","text":"Ungar 2006. “Thomas precession: kinematic       effect...”. European Journal Physics, 27:L17-L20 Sbitneva 2001. “Nonassociative geometry special relativity”.     International Journal Theoretical Physics, volume 40, number 1,       pages 359--362 Wikipedia contributors 2018.  “Wigner rotation”,   Wikipedia, Free Encyclopedia.   https://en.wikipedia.org/w/index.php?title=Wigner_rotation&oldid=838661305.  Online; accessed 23 August 2018","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/boost.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lorentz transformations — boost","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/boost.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Lorentz transformations — boost","text":"Function rot() uses crossprod() efficiency reasons algebraically equivalent boost(-u-v) %*% boost(u) %*% boost(v).","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/boost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lorentz transformations — boost","text":"","code":"boost(as.3vel(c(0.4,-0.2,0.1))) #>            t           x           y           z #> t  1.1250879 -0.45003516  0.22501758 -0.11250879 #> x -0.4500352  1.09530507 -0.04765253  0.02382627 #> y  0.2250176 -0.04765253  1.02382627 -0.01191313 #> z -0.1125088  0.02382627 -0.01191313  1.00595657  u <- r3vel(1) v <- r3vel(1) w <- r3vel(1)  boost(u) - solve(boost(-u))  # should be zero #>               t             x             y             z #> t  1.509903e-14 -1.154632e-14  6.217249e-15 -6.217249e-15 #> x -9.769963e-15  8.881784e-15 -3.996803e-15  4.440892e-15 #> y  7.993606e-15 -6.217249e-15  3.108624e-15 -3.108624e-15 #> z -7.105427e-15  6.439294e-15 -3.108624e-15  2.664535e-15  boost(u) %*% boost(v)   # not a pure boost (not symmetrical) #>           t         x         y         z #> t  9.737269 -8.486281  3.898065 -2.569543 #> x -7.287716  6.736131 -2.487961  1.595430 #> y  5.073390 -4.164254  2.829272 -1.180464 #> z -3.868374  3.209437 -1.414276  1.914068 boost(u+v)  # not the same! #>           t         x         y         z #> t  9.737269 -7.287716  5.073390 -3.868374 #> x -7.287716  5.946398 -3.443466  2.625585 #> y  5.073390 -3.443466  3.397191 -1.827818 #> z -3.868374  2.625585 -1.827818  2.393680 boost(v+u)  # also not the same! #>           t         x          y          z #> t  9.737269 -8.486281  3.8980645 -2.5695426 #> x -8.486281  7.707195 -3.0808643  2.0308571 #> y  3.898065 -3.080864  2.4151556 -0.9328482 #> z -2.569543  2.030857 -0.9328482  1.6149188  u+v  # returns a three-velocity #> A vector of three-velocities (speed of light = 1) #>              x         y         z #> [1,] 0.7484353 -0.521028 0.3972751   boost(u) %*% boost(v) %*% boost(w)  # associative, no brackets needed #>           t         x         y         z #> t 11.206108 -7.835494 -5.529288  5.710417 #> x -9.358542  6.218872  5.005106 -4.985664 #> y  4.936559 -3.853209 -1.676559  2.776967 #> z -3.553159  2.978823  1.926418 -1.020034 boost(u+(v+w))  # not the same! #>           t         x         y         z #> t 11.206108 -9.358542  4.936559 -3.553159 #> x -9.358542  8.175285 -3.784908  2.724242 #> y  4.936559 -3.784908  2.996510 -1.437017 #> z -3.553159  2.724242 -1.437017  2.034313 boost((u+v)+w)  # also not the same! #>           t         x          y          z #> t  8.065078 -6.818864  3.4081555 -2.4357856 #> x -6.818864  6.129234 -2.5636568  1.8322281 #> y  3.408156 -2.563657  2.2813486 -0.9157711 #> z -2.435786  1.832228 -0.9157711  1.6544954   rot(u,v) #>            x            y           z #> x  0.9762303  0.157775645 -0.14859773 #> y -0.1544626  0.987425363  0.03365211 #> z  0.1520386 -0.009899424  0.98832497 rot(v,u)    # transpose (=inverse) of rot(u,v) #>            x           y            z #> x  0.9762303 -0.15446258  0.152038649 #> y  0.1577756  0.98742536 -0.009899424 #> z -0.1485977  0.03365211  0.988324972   rot(u,v,FALSE) %*% boost(v) %*% boost(u) #>           t         x         y         z #> t  9.737269 -7.287716  5.073390 -3.868374 #> x -7.287716  5.946398 -3.443466  2.625585 #> y  5.073390 -3.443466  3.397191 -1.827818 #> z -3.868374  2.625585 -1.827818  2.393680 boost(u+v)     # should be the same. #>           t         x         y         z #> t  9.737269 -7.287716  5.073390 -3.868374 #> x -7.287716  5.946398 -3.443466  2.625585 #> y  5.073390 -3.443466  3.397191 -1.827818 #> z -3.868374  2.625585 -1.827818  2.393680   orthog(boost(u) %*% boost(v)) - rot(u,v,FALSE)  # zero to numerical precision #>               t             x             y             z #> t -1.573497e-11 -1.378326e-11  6.329421e-12 -4.176805e-12 #> x -1.185901e-11 -1.038736e-11  4.765133e-12 -3.141182e-12 #> y  8.255711e-12  7.236350e-12 -3.316680e-12  2.186855e-12 #> z -6.298355e-12 -5.520834e-12  2.530070e-12 -1.668665e-12 pureboost(boost(v) %*% boost(u)) - boost(u+v)   # ditto #>               t             x             y             z #> t  1.081801e-12  8.215650e-13 -5.684342e-13  4.338752e-13 #> x  8.206769e-13  6.155076e-13 -4.316547e-13  3.286260e-13 #> y -5.684342e-13 -4.316547e-13  2.988720e-13 -2.295941e-13 #> z  4.338752e-13  3.286260e-13 -2.295941e-13  1.740830e-13   ## Define a random-ish Lorentz transform L <- boost(r3vel(1)) %*% boost(r3vel(1)) %*% boost(r3vel(1))  ## check it:   if (FALSE)    # needs emulator package quad.form(eta(),L)  # should be eta()   ## More concisely: is.consistent.boost(L)     # should be TRUE #> [1] TRUE  ## Decompose L into a rotation and a pure boost: U <- orthog(L) P <- pureboost(L)  L - U %*% P              # should be zero (L = UP) #>               t             x             y             z #> t -3.552714e-15 -1.776357e-15  1.387779e-16  4.440892e-15 #> x  2.664535e-15  1.554312e-15 -1.110223e-16 -1.776357e-15 #> y  3.552714e-15  3.108624e-15 -1.665335e-16 -2.220446e-15 #> z  4.440892e-16 -5.551115e-17  0.000000e+00 -4.440892e-16 crossprod(U)               # should be identity (U is orthogonal) #>               t            x             y             z #> t  1.000000e+00 1.365886e-12 -5.504318e-14 -1.584283e-12 #> x  1.365886e-12 1.000000e+00  3.591945e-14  1.050513e-12 #> y -5.504318e-14 3.591945e-14  1.000000e+00 -4.177791e-14 #> z -1.584283e-12 1.050513e-12 -4.177791e-14  1.000000e+00 P - t(P)                   # should be zero (P is symmetric) #>               t            x             y            z #> t  0.000000e+00 4.440892e-16  1.387779e-17 0.000000e+00 #> x -4.440892e-16 0.000000e+00  0.000000e+00 0.000000e+00 #> y -1.387779e-17 0.000000e+00  0.000000e+00 1.387779e-17 #> z  0.000000e+00 0.000000e+00 -1.387779e-17 0.000000e+00  ## First row of P should be a consistent 4-velocity: is.consistent.4vel(P[1,,drop=FALSE],give=TRUE) #>             t  #> -2.060574e-12"},{"path":"https://robinhankin.github.io/lorentz/reference/c.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine vectors of three-velocities and four-velocities into a single vector — c.3vel","title":"Combine vectors of three-velocities and four-velocities into a single vector — c.3vel","text":"Combines arguments recursively form vector three velocities four velocities","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine vectors of three-velocities and four-velocities into a single vector — c.3vel","text":"","code":"# S3 method for 3vel c(...) # S3 method for 3cel c(...) # S3 method for 4vel c(...)"},{"path":"https://robinhankin.github.io/lorentz/reference/c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine vectors of three-velocities and four-velocities into a single vector — c.3vel","text":"... Vectors three-velocities","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/c.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine vectors of three-velocities and four-velocities into a single vector — c.3vel","text":"Returns vector three-velocities four-velocities.    stored three- four- column matrices; row velocity. Names inherited behaviour cbind(),   c().","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/c.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Combine vectors of three-velocities and four-velocities into a single vector — c.3vel","text":"function used extensively   inst/distributive_search.R. “c” celerity speed light, see sol().","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/c.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine vectors of three-velocities and four-velocities into a single vector — c.3vel","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/lorentz/reference/c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine vectors of three-velocities and four-velocities into a single vector — c.3vel","text":"","code":"c(r3vel(3),r3vel(6,0.99)) #> A vector of three-velocities (speed of light = 1) #>                 x           y           z #>  [1,] -0.05816718 -0.06624164 -0.20242291 #>  [2,] -0.29881039 -0.73315115 -0.05731501 #>  [3,]  0.30948248  0.25863116  0.47313677 #>  [4,]  0.09891397 -0.65882617 -0.73230055 #>  [5,] -0.71880853 -0.42809206 -0.52929338 #>  [6,]  0.79445798  0.58466899  0.08425372 #>  [7,] -0.40279488 -0.70513601 -0.56625038 #>  [8,]  0.19710905 -0.87657737  0.41576452 #>  [9,] -0.18172162 -0.31046935 -0.92232642"},{"path":"https://robinhankin.github.io/lorentz/reference/celerity.html","id":null,"dir":"Reference","previous_headings":"","what":"Celerity and rapidity — celerity","title":"Celerity and rapidity — celerity","text":"celerity rapidity object (experimental functionality)","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/celerity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Celerity and rapidity — celerity","text":"","code":"# S3 method for 3vel celerity(u) # S3 method for 4vel celerity(u) celerity_ur(d) # S3 method for 3vel rapidity(u) # S3 method for 4vel rapidity(u) rapidity_ur(d) as.3cel(x) cel_to_vel(x) vel_to_cel(x)"},{"path":"https://robinhankin.github.io/lorentz/reference/celerity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Celerity and rapidity — celerity","text":"u,x Speed: either vector speeds vector     three-velocities four-velocities d functions celerity_ur() rapidity_ur(),       deficit speed; speed light minus speed object","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/celerity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Celerity and rapidity — celerity","text":"celerity corresponding speed \\(u\\) defined   \\(u\\gamma\\) rapidity   \\(c\\cdot\\mathrm{atanh}(u/c)\\). Functions celerity_ur() rapidity_ur() used   ultrarelativistic case speeds close speed   light.  argument d deficit, , \\(d=c-v\\)   \\(v\\) speed transformation.  Algebraically,   celerity_ur(c-v) == celerity(v), \\(d=1-v/c\\) small   result celerity_ur() accurate   celerity(). Things get bit sticky celerity rapidity \\(c\\neq   1\\).  guiding principle package give   celerity rapidity units \\(c\\), \\(u\\ll   c\\) three celerity(u),   rapidity(u) u approximately equal.  Note   carefully , contrast, \\(\\gamma\\) dimensionless.  Also   observe d functions celerity_ur()   rapidity_ur() units \\(c\\).","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/celerity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Celerity and rapidity — celerity","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/lorentz/reference/celerity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Celerity and rapidity — celerity","text":"","code":"u <- 0.1  # c=1 c(u,celerity(u),rapidity(u)) #> [1] 0.1000000 0.1005038 0.1003353  omgp <- 4.9e-24  # speed deficit of the Oh-My-God particle c(celerity_ur(omgp),rapidity_ur(omgp)) #> [1] 3.194383e+11 2.718298e+01   sol(299792458)                 # use SI units #> [1] 299792458 u <- 3e7  # ~0.1c c(u,celerity(u),rapidity(u)) #> [1] 30000000 30151345 30100745   snail <- 0.00275 c(snail,celerity(snail),rapidity(snail)) #> [1] 0.00275 0.00275 0.00275   omgp <- omgp*sol()  c(celerity_ur(omgp),rapidity_ur(omgp)) #> [1] 9.576519e+19 8.149252e+09   sol(1) #> [1] 1"},{"path":"https://robinhankin.github.io/lorentz/reference/comm_fail.html","id":null,"dir":"Reference","previous_headings":"","what":"Failure of commutativity and associativity using visual plots — comm_fail","title":"Failure of commutativity and associativity using visual plots — comm_fail","text":"Relativistic addition three-velocities neither commutative associative, functions documented show visually.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/comm_fail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Failure of commutativity and associativity using visual plots — comm_fail","text":"","code":"comm_fail1(u, v, bold=5, r=1) comm_fail2(u, v, bold=5, r=1) ass_fail(u, v, w, bold=5,r=1) my_seg(u,start=as.3vel(0), bold=5, ...)"},{"path":"https://robinhankin.github.io/lorentz/reference/comm_fail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Failure of commutativity and associativity using visual plots — comm_fail","text":"u,v,w,start Three velocities.  Arguments u w     single-element three velocities, argument v vector.  See     examples bold Integer specifying vector element drawn     bold r Radius dotted green circle, defaulting 1 (corresponding     \\(c=1\\)).  Use NA suppress plotting circle ... arguments, passed arrows()","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/comm_fail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Failure of commutativity and associativity using visual plots — comm_fail","text":"functions called side-effect plotting diagram.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/comm_fail.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Failure of commutativity and associativity using visual plots — comm_fail","text":"vignette lorentz gives details   interpretation diagrams. Function my_seg() internal helper function.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/comm_fail.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Failure of commutativity and associativity using visual plots — comm_fail","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/comm_fail.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Failure of commutativity and associativity using visual plots — comm_fail","text":"","code":"u <- as.3vel(c(0.4,0,0)) v <- seq(as.3vel(c(0.4,-0.2,0)), as.3vel(c(-0.3,0.9,0)),len=20) w <- as.3vel(c(0.8,-0.4,0))  comm_fail1(u=u, v=v)  comm_fail2(u=u, v=v)    ass_fail(u=u, v=v, w=w, bold=10)"},{"path":"https://robinhankin.github.io/lorentz/reference/coordnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Coordinate names for relativity — coordnames","title":"Coordinate names for relativity — coordnames","text":"Trivial function set coordinate names “t”, “x”, “y”, “z”.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/coordnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coordinate names for relativity — coordnames","text":"","code":"coordnames(...) flob(x)"},{"path":"https://robinhankin.github.io/lorentz/reference/coordnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coordinate names for relativity — coordnames","text":"... arguments, currently ignored x matrix","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/coordnames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coordinate names for relativity — coordnames","text":"Function coordnames() simply returns character string   c(\"t\",\"x\",\"y\",\"z\").  may overwritten.   Function flob() sets row columnnames \\(4\\times     4\\) matrix coordnames().","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/coordnames.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coordinate names for relativity — coordnames","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/coordnames.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Coordinate names for relativity — coordnames","text":"anyone can think better name flob() let know.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/coordnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coordinate names for relativity — coordnames","text":"","code":"coordnames() #> [1] \"t\" \"x\" \"y\" \"z\"  flob(diag(3)) #>   x y z #> x 1 0 0 #> y 0 1 0 #> z 0 0 1 flob(matrix(1,4,4)) #>   t x y z #> t 1 1 1 1 #> x 1 1 1 1 #> y 1 1 1 1 #> z 1 1 1 1  ## You can change the names if you wish: coordnames <- function(x){letters[1:4]} flob(outer(1:4,1:4)) #>   t x  y  z #> t 1 2  3  4 #> x 2 4  6  8 #> y 3 6  9 12 #> z 4 8 12 16"},{"path":"https://robinhankin.github.io/lorentz/reference/cosines.html","id":null,"dir":"Reference","previous_headings":"","what":"Direction cosines — cosines","title":"Direction cosines — cosines","text":"Given vector three-velocities, returns direction cosines","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/cosines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direction cosines — cosines","text":"","code":"cosines(u, drop = TRUE)"},{"path":"https://robinhankin.github.io/lorentz/reference/cosines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direction cosines — cosines","text":"u vector three-velocities drop Boolean, default TRUE meaning coerce return     value one-row matrix vector, FALSE meaning     consistently return matrix","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/cosines.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Direction cosines — cosines","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/cosines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Direction cosines — cosines","text":"","code":"cosines(r3vel(7)) #>               x           y           z #> [1,]  0.2634222 -0.85567953  0.44544506 #> [2,] -0.6005713 -0.73022455 -0.32570874 #> [3,] -0.2675048  0.27060355  0.92477830 #> [4,]  0.9658793 -0.22823799 -0.12241157 #> [5,] -0.5460130 -0.83721646  0.03063372 #> [6,] -0.3068451  0.03717345 -0.95103324 #> [7,]  0.3137768 -0.35074605  0.88233856   cosines(r3vel(1),drop=TRUE) #>         x         y         z  #> 0.6089656 0.2308035 0.7588746  cosines(r3vel(1),drop=FALSE) #>               x         y         z #> [1,] -0.7976846 0.3832828 -0.465611"},{"path":"https://robinhankin.github.io/lorentz/reference/fourmom.html","id":null,"dir":"Reference","previous_headings":"","what":"Four momentum — fourmom","title":"Four momentum — fourmom","text":"Create test four-momentum","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/fourmom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Four momentum — fourmom","text":"","code":"# S3 method for 4mom Ops(e1, e2) # S3 method for 4mom sum(..., na.rm=FALSE) vel_to_4mom(U,m=1) p_to_4mom(p,E=1) as.4mom(x) is.4mom(x) fourmom_mult(P,n) fourmom_add(e1,e2)"},{"path":"https://robinhankin.github.io/lorentz/reference/fourmom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Four momentum — fourmom","text":"x,P,e1,e2 Four-momentum p Three-momentum E Scalar; energy U Object coerced four-velocity m Scalar; rest mass n Multiplying factor ...,na.rm Arguments sent sum()","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/fourmom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Four momentum — fourmom","text":"Four-momentum relativistic generalization three-momentum, object's energy first element.  can defined \\(mU\\), \\(m\\) rest mass \\(U\\) four-velocity. Equivalently, one can define four-momentum \\((E/c,p_x,p_y,p_z)\\) \\(E\\) energy \\((p_x,p_y,p_z)\\) three-momentum. Function vel_to_4mom() converts three-velocity four-momentum, function p_to_4mom()) converts three-momentum four-momentum. function Ops.4mom() passes unary binary arithmetic operators “+”, “-” “*” appropriate specialist function. package designed natural R idiom may used physically meaningful operations combining momenta different objects, using conservation four-momentum. four-momentum photon, use .photon().","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/fourmom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Four momentum — fourmom","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/lorentz/reference/fourmom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Four momentum — fourmom","text":"","code":"# Define 5 random three velocities: v <- r3vel(5)  # convert to four-velocity: as.4vel(v) #> A vector of four-velocities (speed of light = 1) #>             t          x          y          z #> [1,] 1.873437  1.3201103 -0.4495123 -0.7516731 #> [2,] 3.536774 -2.0645491  1.4051491 -2.2960760 #> [3,] 3.751454  0.7592646  2.8289649  2.1198783 #> [4,] 1.364977  0.4588069  0.7571309 -0.2817978 #> [5,] 1.973527  0.6500849  1.5633365 -0.1678610  # Now convert 'v' to four-momentum, specifying rest mass: vel_to_4mom(v)         # 4mom of five objects with 3vel v, all unit mass #>             E        p_x        p_y        p_z #> [1,] 1.873437  1.3201103 -0.4495123 -0.7516731 #> [2,] 3.536774 -2.0645491  1.4051491 -2.2960760 #> [3,] 3.751454  0.7592646  2.8289649  2.1198783 #> [4,] 1.364977  0.4588069  0.7571309 -0.2817978 #> [5,] 1.973527  0.6500849  1.5633365 -0.1678610 vel_to_4mom(v,   1:5)  # 4mom of five objects with 3vel v, masses 1-5 #>              E       p_x        p_y        p_z #> [1,]  1.873437  1.320110 -0.4495123 -0.7516731 #> [2,]  7.073548 -4.129098  2.8102981 -4.5921519 #> [3,] 11.254363  2.277794  8.4868946  6.3596350 #> [4,]  5.459906  1.835227  3.0285234 -1.1271912 #> [5,]  9.867635  3.250424  7.8166824 -0.8393051 vel_to_4mom(v[1],1:5)  # 4mom of five objects with same 3vel, masses 1..5 #>             E      p_x        p_y        p_z #> [1,] 1.873437 1.320110 -0.4495123 -0.7516731 #> [2,] 3.746873 2.640221 -0.8990247 -1.5033463 #> [3,] 5.620310 3.960331 -1.3485370 -2.2550194 #> [4,] 7.493747 5.280441 -1.7980493 -3.0066926 #> [5,] 9.367183 6.600551 -2.2475617 -3.7583657  # Now convert 'v' to four-momentum, specifying energy E: p_to_4mom(v,E=1) #>      E        p_x        p_y         p_z #> [1,] 1  0.7046463 -0.2399400 -0.40122688 #> [2,] 1 -0.5837379  0.3972968 -0.64920061 #> [3,] 1  0.2023921  0.7540982  0.56508175 #> [4,] 1  0.3361280  0.5546842 -0.20644883 #> [5,] 1  0.3294026  0.7921536 -0.08505636 p_to_4mom(v,E=10)   # slower #>       E        p_x        p_y         p_z #> [1,] 10  0.7046463 -0.2399400 -0.40122688 #> [2,] 10 -0.5837379  0.3972968 -0.64920061 #> [3,] 10  0.2023921  0.7540982  0.56508175 #> [4,] 10  0.3361280  0.5546842 -0.20644883 #> [5,] 10  0.3294026  0.7921536 -0.08505636 p_to_4mom(v,E=100)  # even slower #>        E        p_x        p_y         p_z #> [1,] 100  0.7046463 -0.2399400 -0.40122688 #> [2,] 100 -0.5837379  0.3972968 -0.64920061 #> [3,] 100  0.2023921  0.7540982  0.56508175 #> [4,] 100  0.3361280  0.5546842 -0.20644883 #> [5,] 100  0.3294026  0.7921536 -0.08505636  # Four-momentum of objects moving closely parallel to the x-axis: P <- vel_to_4mom(as.3vel(c(0.8,0,0)) + r3vel(7,0.01))  reflect(P) #>             E       p_x          p_y           p_z #> [1,] 1.653712 -1.317102  0.001985792  0.0006676058 #> [2,] 1.657063 -1.321291  0.002093272 -0.0065456898 #> [3,] 1.668564 -1.335668  0.009024225  0.0040892229 #> [4,] 1.672821 -1.340989 -0.007685241 -0.0044959023 #> [5,] 1.678165 -1.347669  0.004370885  0.0027575392 #> [6,] 1.666447 -1.333021  0.006976032  0.0071619366 #> [7,] 1.675537 -1.344383  0.004689650  0.0058811403 reflect(P,c(1,1,1)) #>             E       p_x        p_y        p_z #> [1,] 1.653712 0.4408030 -0.8782851 -0.8769669 #> [2,] 1.657063 0.4374622 -0.8859225 -0.8772836 #> [3,] 1.668564 0.4539649 -0.8907272 -0.8857922 #> [4,] 1.672821 0.4388756 -0.8944282 -0.8976176 #> [5,] 1.678165 0.4539754 -0.8980649 -0.8964515 #> [6,] 1.666447 0.4537657 -0.8862315 -0.8864174 #> [7,] 1.675537 0.4551750 -0.8938981 -0.8950896  sum(P) #>             E      p_x         p_y          p_z #> [1,] 11.67231 9.340125 -0.02145461 -0.009515853"},{"path":"https://robinhankin.github.io/lorentz/reference/fourvel.html","id":null,"dir":"Reference","previous_headings":"","what":"Four velocities — fourvel","title":"Four velocities — fourvel","text":"Create test four-velocities.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/fourvel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Four velocities — fourvel","text":"","code":"as.4vel(u) is.consistent.4vel(U, give=FALSE, TOL=1e-10) inner4(U,V=U) to3(U)"},{"path":"https://robinhankin.github.io/lorentz/reference/fourvel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Four velocities — fourvel","text":"u vector three-velocities U,V vector four-velocities give function .consistent.4vel(), Boolean     TRUE meaning return \\(U\\cdot U+c^2\\),     zero four-velocity, default FALSE meaning return     whether four-velocity consistent numerical precision TOL Small positive value used tolerance","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/fourvel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Four velocities — fourvel","text":"Function .4vel() takes three-velocity returns   four-velocity. Given four-vector \\(V\\), function inner4() returns   Lorentz invariant \\(V^iV_i=\\eta_{ij}V^iV^j\\).    quantity unchanged Lorentz transforms.  Note function   inner4() works four-vector, just four-velocities.   work (eg) four-displacement, four-momentum vector   four-frequency.  electromagnetism, four-current   four-potential.  \\(U\\) four-velocity,   \\(U^iU_i=-c^2\\); \\(U\\) 4-displacement, \\(U^iU_i\\)   squared interval.  \\(P\\) four-momentum photon   \\(P^iP_i=0\\). Function to3() low-level helper function used   .3vel() given four-velocity. Function .consistent.4vel() checks four-velocities   consistent sense \\(U^iU_i=-c^2\\).  Giving   function vector, example, .consistent.4vel(1:5),   return error. Compare functions documented boost(),   returns \\(4\\times 4\\) transformation matrix (also   includes rotation information).","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/fourvel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Four velocities — fourvel","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/lorentz/reference/fourvel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Four velocities — fourvel","text":"","code":"a <- r3vel(10) as.4vel(a)     # a four-velocity #> A vector of four-velocities (speed of light = 1) #>              t          x          y           z #>  [1,] 6.440964  3.7257715  2.9436728  4.23549667 #>  [2,] 1.375986  0.1584525 -0.5959661  0.71627894 #>  [3,] 4.162938 -3.7592984  0.3442129  1.44196033 #>  [4,] 1.269151  0.2244770 -0.7454220  0.06855187 #>  [5,] 1.451044  0.1141376  0.3835667  0.97230550 #>  [6,] 1.714245  0.1439210 -1.0519306  0.90075692 #>  [7,] 1.617501 -0.9875291 -0.4479364  0.66366276 #>  [8,] 6.361601 -2.5758516 -5.1385181 -2.53585972 #>  [9,] 1.021299  0.1390898  0.1144809  0.10295454 #> [10,] 3.174876  1.2984781  2.7103257 -0.21892517  as.3vel(as.4vel(a))-a   # zero to numerical precision #> A vector of three-velocities (speed of light = 1) #>                   x            y             z #>  [1,]  2.302936e-15 2.302936e-15  4.605873e-15 #>  [2,]  2.627535e-17 7.882604e-17  5.255070e-17 #>  [3,]  0.000000e+00 2.405028e-16  0.000000e+00 #>  [4,]  1.117678e-17 4.470710e-17  1.117678e-17 #>  [5,]  7.305020e-18 0.000000e+00  1.168803e-16 #>  [6,]  0.000000e+00 0.000000e+00 -8.156349e-17 #>  [7,]  1.452343e-16 3.630858e-17 -7.261716e-17 #>  [8,] -2.246534e-15 0.000000e+00  0.000000e+00 #>  [9,]  1.176114e-17 6.785272e-18  7.237624e-18 #> [10,]  5.595435e-16 1.119087e-15 -6.994293e-17  inner4(as.4vel(a))   #  -1 to numerical precision #>  [1] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  stopifnot(all(is.consistent.4vel(as.4vel(a))))   ## check Lorentz invariance of dot product: U <- as.4vel(r3vel(10)) V <- as.4vel(r3vel(10)) B <- boost(as.3vel(1:3/10))  frame1dotprod <- inner4(U, V) frame2dotprod <- inner4(U %*% B, V %*% B) max(abs(frame1dotprod-frame2dotprod))  # zero to numerical precision #> [1] 3.552714e-15"},{"path":"https://robinhankin.github.io/lorentz/reference/galileo.html","id":null,"dir":"Reference","previous_headings":"","what":"Classical mechanics; Newtonian approximation; infinite speed of light — galileo","title":"Classical mechanics; Newtonian approximation; infinite speed of light — galileo","text":"Lorentz transforms reduce classical limit, Galilean transforms, speeds low compared \\(c\\).  Package idiom working classical framework use infinite speed light: sol(Inf).  show examples .","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/galileo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Classical mechanics; Newtonian approximation; infinite speed of light — galileo","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/lorentz/reference/galileo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classical mechanics; Newtonian approximation; infinite speed of light — galileo","text":"","code":"sol(Inf) #> [1] Inf boost(as.3vel(1:3)) #>    t x y z #> t  1 0 0 0 #> x -1 1 0 0 #> y -2 0 1 0 #> z -3 0 0 1 as.3vel(1:3) + as.3vel(c(-1,4,5))     # classical velocity addition #> A vector of three-velocities (speed of light = Inf) #>      x y z #> [1,] 0 6 8 rot(as.3vel(1:3),as.3vel(c(-4,5,2)))  # identity matrix #>   x y z #> x 1 0 0 #> y 0 1 0 #> z 0 0 1   B <- boost(as.3vel(1:3)) orthog(B) %*% pureboost(B)  # should be B #>       t x y z #> [1,]  1 0 0 0 #> [2,] -1 1 0 0 #> [3,] -2 0 1 0 #> [4,] -3 0 0 1  sol(1) #> [1] 1"},{"path":"https://robinhankin.github.io/lorentz/reference/gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Gamma correction — gam","title":"Gamma correction — gam","text":"Lorentz gamma correction term special relativity","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gamma correction — gam","text":"","code":"# S3 method for 3vel speed(u) # S3 method for 4vel speed(u) speedsquared(u) gam(u) gamm1(u) # S3 method for 3vel gam(u) # S3 method for 3cel gam(u) # S3 method for 4vel gam(u) # S3 method for 3vel gamm1(u) # S3 method for 4vel gamm1(u) gam_ur(d)"},{"path":"https://robinhankin.github.io/lorentz/reference/gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gamma correction — gam","text":"u Speed: either vector speeds vector     three-velocities four-velocities d function gam_ur(), deficit speed; speed light       minus speed object","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/gam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gamma correction — gam","text":"Function speed(u) returns speed 3vel object   4vel object. Function gam(u) returns Lorentz factor   $$\\frac{1}{\\sqrt{1-\\mathbf{u}\\cdot\\mathbf{u}/c^2}}$$ Function gamm1(u) returns Lorentz factor minus 1, useful   slow speeds larger accuracy needed (much like   expm1()); see R idiom, type “gamm1.3vel”   commandline.  Function gamm1() intended work   3vel objects speeds.  function take 4-velocity,   recommended accuracy lost (return   time component 4-velocity minus 1). Function gam_ur() used ultrarelativistic case   speeds close speed light (function named   “gamma, ultrarelativistic”).  argument d   deficit, , \\(c-v\\) \\(v\\) speed   transformation.  Algebraically, gam_ur(c-v) == gam(v),   d small compared c result accurate. Function speedsquared(u) returns square speed   3vel object.  Use avoid taking needless square root.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/gam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gamma correction — gam","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/gam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gamma correction — gam","text":"","code":"gam(seq(from=0,by=0.1,len=10)) #>  [1] 1.000000 1.005038 1.020621 1.048285 1.091089 1.154701 1.250000 1.400280 #>  [9] 1.666667 2.294157 gam(r3vel(6,0.7)) #> [1] 1.40028 1.40028 1.40028 1.40028 1.40028 1.40028   x <- as.3vel(c(0.1,0.4,0.5)) speed(x) #> [1] 0.6480741  gam(speed(x))  # works, but slow and inaccurate #> [1] 1.313064 gam(x)         # recommended: avoids needless coercion #> [1] 1.313064    ## Use SI units and deal with terrestrial speeds.  Use gamm1() for this. sol(299792458) #> [1] 299792458 sound <- 343 # speed of sound in SI gam(sound) #> [1] 1 gam(sound)-1   #> [1] 6.545875e-13 gamm1(sound)   # gamm1() gives much higher precision #> [1] 6.545108e-13  snail <- as.3vel(c(0.00275,0,0)) # even the world's fastest snail... gamm1(snail)                     # ...has only a small relativistic correction #> [1] 4.207208e-23   ## For the ultrarelativistic case of speeds very close to the speed of ## light, use gam_ur():  sol(1)           # revert to relativistic units #> [1] 1  gam(0.99) - gam_ur(0.01) # zero to numerical accuracy #> [1] -4.440892e-15  omgp <- 4.9e-24  # speed deficit of the Oh-My-God particle gam(1-omgp)      # numeric overflow #> [1] Inf gam_ur(omgp)     # large but finite #> [1] 319438282500"},{"path":"https://robinhankin.github.io/lorentz/reference/gyr.html","id":null,"dir":"Reference","previous_headings":"","what":"Gyr function — gyr","title":"Gyr function — gyr","text":"Relativistic addition three velocities","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/gyr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gyr function — gyr","text":"","code":"gyr(u, v, x) gyr.a(u, v, x) gyrfun(u, v)"},{"path":"https://robinhankin.github.io/lorentz/reference/gyr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gyr function — gyr","text":"u,v,x Three-velocities, objects class 3vel","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/gyr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gyr function — gyr","text":"Function  gyr(u,v,x) returns three-vector   \\(\\mathrm{gyr}[u,v]x\\). Function gyrfun(u,v) returns function returns   three-vector; see examples. speed light (1 default) used directly   functions; set sol().","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/gyr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gyr function — gyr","text":"Ungar 2006. “Thomas precession: kinematic   effect algebra Einstein's velocity addition law.  Comments   ‘Deriving relativistic momentum energy: II.     Three-dimensional case’”. European Journal Physics,   27:L17-L20. Sbitneva 2001. “Nonassociative geometry special relativity”. International Journal Theoretical Physics, volume 40, number 1,   pages 359--362","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/gyr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gyr function — gyr","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/gyr.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Gyr function — gyr","text":"Function gyr() slightly faster gyr.(),   included pedagogical reasons. Function gyr() simply add3(neg3(add3(u,v)),add3(u,add3(v,x))) function gyr.() uses slower transparent   idiom -(u+v) + (u+(v+x))","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/gyr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gyr function — gyr","text":"","code":"u <- r3vel(10) v <- r3vel(10) w <- r3vel(10)  x <- as.3vel(c(0.4,0.1,-0.5)) y <- as.3vel(c(0.1,0.2,-0.7)) z <- as.3vel(c(0.2,0.3,-0.1))   gyr(u,v,x)  # gyr[u,v]x #> A vector of three-velocities (speed of light = 1) #>               x           y           z #>  [1,] 0.5398968  0.03527149 -0.35674549 #>  [2,] 0.1239123 -0.21517326 -0.59862025 #>  [3,] 0.5287714  0.17523334 -0.33120091 #>  [4,] 0.4166899 -0.05205034 -0.49361956 #>  [5,] 0.4012509  0.11382141 -0.49602663 #>  [6,] 0.4049554  0.08598841 -0.49861521 #>  [7,] 0.6399607 -0.03340528 -0.09661474 #>  [8,] 0.4093259  0.03513923 -0.50121609 #>  [9,] 0.5804320  0.28501261 -0.04320288 #> [10,] 0.3987684  0.06054872 -0.50726483  f <- gyrfun(u,v) g <- gyrfun(v,u)  f(x) #> A vector of three-velocities (speed of light = 1) #>               x           y           z #>  [1,] 0.5398968  0.03527149 -0.35674549 #>  [2,] 0.1239123 -0.21517326 -0.59862025 #>  [3,] 0.5287714  0.17523334 -0.33120091 #>  [4,] 0.4166899 -0.05205034 -0.49361956 #>  [5,] 0.4012509  0.11382141 -0.49602663 #>  [6,] 0.4049554  0.08598841 -0.49861521 #>  [7,] 0.6399607 -0.03340528 -0.09661474 #>  [8,] 0.4093259  0.03513923 -0.50121609 #>  [9,] 0.5804320  0.28501261 -0.04320288 #> [10,] 0.3987684  0.06054872 -0.50726483 f(r3vel(10)) #> A vector of three-velocities (speed of light = 1) #>                x           y           z #>  [1,]  0.5615495 -0.05189368 -0.53813362 #>  [2,]  0.1906529  0.26726056  0.80554684 #>  [3,]  0.4033622 -0.79346218  0.03728001 #>  [4,] -0.1425831 -0.24347503 -0.53643298 #>  [5,]  0.6749677 -0.33270008  0.56560626 #>  [6,] -0.4057827  0.20070027 -0.30407960 #>  [7,]  0.4318910 -0.51386159 -0.09010112 #>  [8,]  0.9260026  0.01296941  0.32032467 #>  [9,]  0.3242302 -0.43396570  0.41025551 #> [10,] -0.5970600  0.62703648  0.08280100  f(g(x)) - x              # zero, by eqn 9 #> A vector of three-velocities (speed of light = 1) #>                   x             y             z #>  [1,] -2.320940e-15 -1.782578e-15  4.139409e-15 #>  [2,]  6.699622e-16  2.135504e-15 -2.631994e-16 #>  [3,] -2.631994e-16 -7.955801e-16 -3.325884e-15 #>  [4,] -3.349811e-16 -3.050721e-16  2.153450e-16 #>  [5,] -2.392722e-17  1.375815e-16 -1.435633e-16 #>  [6,]  0.000000e+00 -8.972708e-17  9.570888e-17 #>  [7,] -2.727703e-15  2.817430e-15 -2.847339e-15 #>  [8,]  3.828355e-16  2.392722e-17 -2.392722e-16 #>  [9,]  2.608067e-15  3.313920e-15  6.221077e-16 #> [10,]  9.810160e-16 -6.460349e-16  5.742533e-16 g(f(x)) - x              # zero, by eqn 9 #> A vector of three-velocities (speed of light = 1) #>                   x             y             z #>  [1,] -2.895194e-15 -4.205209e-15  1.074332e-14 #>  [2,] -1.603124e-15 -3.642919e-15  4.354754e-15 #>  [3,]  5.503261e-16 -7.716529e-16 -2.129523e-15 #>  [4,] -1.674905e-16 -5.981805e-17 -2.871266e-16 #>  [5,] -4.067627e-16 -1.196361e-17  1.435633e-16 #>  [6,] -3.110539e-16 -2.751630e-16  3.110539e-16 #>  [7,] -3.852282e-15  3.116520e-15  3.038757e-15 #>  [8,]  3.828355e-16  2.392722e-17 -3.828355e-16 #>  [9,]  1.698833e-15  1.644996e-15 -5.216134e-15 #> [10,]  8.374527e-16 -7.178166e-16  4.306900e-16 (x+y) - f(y+x)           # zero by eqn 10 #> A vector of three-velocities (speed of light = 1) #>                 x           y           z #>  [1,] -0.33540786  0.04724862 -0.27931464 #>  [2,]  0.68945592  0.53820366 -0.36532808 #>  [3,] -0.15264103 -0.43208170 -0.53761147 #>  [4,]  0.25478637  0.50147000  0.03314651 #>  [5,]  0.32373921 -0.15263705  0.04134562 #>  [6,]  0.30994488 -0.01891056  0.08378471 #>  [7,] -0.26762464  0.43160216 -0.76137763 #>  [8,]  0.29145686  0.21505733  0.10528732 #>  [9,] -0.03881621 -0.28108392 -0.89677402 #> [10,]  0.31186645 -0.02882115  0.08152187 (u+(v+w)) - ((u+v)+f(w)) # zero by eqn 11 #> A vector of three-velocities (speed of light = 1) #>                   x             y             z #>  [1,]  1.086684e-15  2.267862e-15 -3.023817e-15 #>  [2,]  0.000000e+00  1.644230e-14  0.000000e+00 #>  [3,] -1.340887e-15 -1.340887e-15 -1.340887e-15 #>  [4,]  3.182253e-16 -3.182253e-16 -6.364506e-16 #>  [5,]  3.382962e-16 -4.228702e-17 -3.382962e-16 #>  [6,]  1.179594e-15 -4.718374e-15  9.436748e-15 #>  [7,]  4.739269e-15 -4.739269e-15  2.369635e-15 #>  [8,] -4.455216e-17 -3.564173e-16  0.000000e+00 #>  [9,]  0.000000e+00  0.000000e+00  1.390020e-15 #> [10,]  0.000000e+00  4.280057e-15  1.337518e-16   # Following taken from Sbitneva 2001:  rbind(x+(y+(x+z))  ,   (x+(y+x))+z)   # left Bol property #>           [,1]      [,2]       [,3] #> [1,] 0.4894115 0.2314344 -0.8300767 #> [2,] 0.4894115 0.2314344 -0.8300767 rbind((x+y)+(x+y)  ,   x+(y+(y+x)))   # left Bruck property #>          [,1]     [,2]       [,3] #> [1,] 0.432766 0.209512 -0.8738679 #> [2,] 0.432766 0.209512 -0.8738679   sol(299792458)   # speed of light in SI #> [1] 299792458 as.3vel(c(1000,3000,1000)) + as.3vel(c(1000,3000,1000)) #> A vector of three-velocities (speed of light = 299792458) #>         x    y    z #> [1,] 2000 6000 2000 ## should be close to Galilean result  sol(1)   # revert to default c=1 #> [1] 1"},{"path":"https://robinhankin.github.io/lorentz/reference/lorentz-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The Lorentz Transform in Relativistic Physics — lorentz-package","title":"The Lorentz Transform in Relativistic Physics — lorentz-package","text":"Lorentz transform special relativity; also     gyrogroup structure three-velocities.  Performs active     passive transforms ability use units     speed light unity.  Includes experimental     functionality celerity rapidity.  general relativity,     see 'schwarzschild' package.  cite lorentz package     publications please use Hankin (2022)     <doi:10.48550/ARXIV.2212.07005>.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/lorentz-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Lorentz Transform in Relativistic Physics — lorentz-package","text":"DESCRIPTION file: package yet installed build time.   Index:  package yet installed build time.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/lorentz-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Lorentz Transform in Relativistic Physics — lorentz-package","text":"NA Maintainer: Robin K. S. Hankin <hankin.robin@gmail.com>","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/lorentz-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Lorentz Transform in Relativistic Physics — lorentz-package","text":"Ungar 2006. “Thomas precession: kinematic   effect...”. European Journal Physics, 27:L17-L20. https://www.youtube.com/watch?v=9Y9CxiukURw&index=68&list=PL9_n3Tqzq9iWtgD8POJFdnVUCZ_zw6OiB","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/lorentz-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Lorentz Transform in Relativistic Physics — lorentz-package","text":"","code":"u <- as.3vel(c(0.3,0.6,-0.1))  # u is a three-velocity gam(u)                         # relativistic gamma term for u #> [1] 1.360828 U <- as.4vel(u)                # U is a four-velocity B1 <- boost(u)                 # B1 is the Lorentz transform matrix for u B1 %*% c(1,0,0,0)              # Lorentz transform of zero 4-velocity (=-u) #>         [,1] #> t  1.3608276 #> x -0.4082483 #> y -0.8164966 #> z  0.1360828  B2 <- boost(as.3vel(c(-0.1,0.8,0.3)))   B3 <- boost(as.3vel(c(-0.1,0.1,0.9)))  # more boosts  Bi <- B1 %*% B2  # Bi is the boost for successive Lorentz transforms   pureboost(Bi)      # Decompose Bi into a pure boost... #>             t           x           y           z #> t  3.78969964 -0.06713162 -3.54542995 -0.88726725 #> x -0.06713162  1.00094091  0.04969215  0.01243579 #> y -3.54542995  0.04969215  3.62439704  0.65677268 #> z -0.88726725  0.01243579  0.65677268  1.16436170 orthog(Bi)         # and an orthogonal matrix #>               t             x             y             z #> t  1.000000e+00 -1.041767e-14 -5.394647e-13 -1.348189e-13 #> x -1.246934e-13  9.794943e-01  1.895365e-01  6.831470e-02 #> y -5.534047e-13 -1.983854e-01  9.664761e-01  1.629943e-01 #> z -3.920328e-14 -3.513115e-02 -1.732047e-01  9.842591e-01  Bj <- B2 %*% B1    # B1 and B2 do not commute...  (B1 %*% B2) %*% B3  #>            t          x          y          z #> t  11.971728  1.0488714 -4.6614329 -10.931294 #> x  -2.357261  0.7672474  1.0039324   2.227135 #> y -11.332721 -1.2028617  4.6544280  10.311158 #> z  -2.887046 -0.2541382  0.2395334   3.035305 B1 %*% (B2 %*% B3)    # ...but composition *is* associative #>            t          x          y          z #> t  11.971728  1.0488714 -4.6614329 -10.931294 #> x  -2.357261  0.7672474  1.0039324   2.227135 #> y -11.332721 -1.2028617  4.6544280  10.311158 #> z  -2.887046 -0.2541382  0.2395334   3.035305    ## Three velocities and the gyrogroup  ## Create some random three-velocities:  u <- r3vel(10) v <- r3vel(10) w <- r3vel(10)  u+v #> A vector of three-velocities (speed of light = 1) #>                x          y           z #>  [1,] -0.3444412  0.6983339  0.58647645 #>  [2,]  0.6895628 -0.4650692  0.53725314 #>  [3,]  0.7931959  0.1009218  0.25232836 #>  [4,]  0.5530328 -0.6274499  0.48475157 #>  [5,] -0.6787429 -0.5756227 -0.05311419 #>  [6,] -0.3424327 -0.3741123 -0.85121222 #>  [7,]  0.5145694 -0.2551687  0.80883461 #>  [8,] -0.1789742 -0.5973247  0.13124325 #>  [9,] -0.2713302 -0.1553406 -0.94910876 #> [10,] -0.5461782  0.1132170  0.79735565 v+u        # Three-velocity addition is not commutative... #> A vector of three-velocities (speed of light = 1) #>                x          y           z #>  [1,] -0.6711606  0.6492677  0.27974913 #>  [2,]  0.6107656 -0.3480603  0.69731381 #>  [3,]  0.7648237  0.3428026  0.02335794 #>  [4,]  0.2751253 -0.3123473  0.87250674 #>  [5,] -0.6877500 -0.5246194  0.21593735 #>  [6,] -0.5624661  0.3485030 -0.73753640 #>  [7,]  0.9692475 -0.2105927  0.01778238 #>  [8,] -0.2720548 -0.5705745  0.08052525 #>  [9,] -0.4924499 -0.5818790 -0.64611774 #> [10,] -0.6758689  0.4966423  0.49340890  u+(v+w)   # ... nor associative #> A vector of three-velocities (speed of light = 1) #>                x          y          z #>  [1,] -0.3157297  0.7173706  0.6143113 #>  [2,]  0.6876553 -0.4436965  0.5663931 #>  [3,]  0.2357646  0.4276689  0.6933954 #>  [4,]  0.5914443 -0.5876025  0.5304440 #>  [5,] -0.8789689 -0.3724481  0.1907068 #>  [6,] -0.2453856 -0.3545384 -0.9008849 #>  [7,]  0.5380859 -0.2841948  0.7929533 #>  [8,] -0.5470712 -0.1171870 -0.3991193 #>  [9,] -0.2629860 -0.1600888 -0.9514120 #> [10,] -0.4838323  0.2869392  0.8222362 (u+v)+w  #> A vector of three-velocities (speed of light = 1) #>                x           y          z #>  [1,] -0.3532592  0.72046409  0.5902044 #>  [2,]  0.6848023 -0.43861420  0.5727080 #>  [3,]  0.3184378  0.22758788  0.7928863 #>  [4,]  0.5780328 -0.55901355  0.5671619 #>  [5,] -0.8825639 -0.29947530  0.2339996 #>  [6,] -0.2577174 -0.34437610 -0.9015431 #>  [7,]  0.5877426 -0.30292899  0.7486239 #>  [8,] -0.4507652 -0.01407778 -0.4107295 #>  [9,] -0.2673802 -0.16888618 -0.9486604 #> [10,] -0.4536078  0.33705328  0.8171351"},{"path":"https://robinhankin.github.io/lorentz/reference/photon.html","id":null,"dir":"Reference","previous_headings":"","what":"Photons — photon","title":"Photons — photon","text":"Various functionality deal 4-momentum photon","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/photon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Photons — photon","text":"","code":"is.consistent.nullvec(N,TOL=1e-10) as.photon(x,E=1)"},{"path":"https://robinhankin.github.io/lorentz/reference/photon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Photons — photon","text":"N Four-momentum tested nullness TOL tolerance x Vector three-velocities E Energy, scalar","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/photon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Photons — photon","text":"Returns four-momentum photon.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/photon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Photons — photon","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/lorentz/reference/photon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Photons — photon","text":"","code":"## A bunch of photons all approximately parallel to the x-axis: as.photon(as.3vel(cbind(0.9,runif(10)/1000,runif(10)/1000))) #>       E       p_x          p_y          p_z #>  [1,] 1 0.9999997 0.0007666842 8.453401e-05 #>  [2,] 1 0.9999996 0.0005514219 6.391779e-04 #>  [3,] 1 0.9999995 0.0006202921 8.372026e-04 #>  [4,] 1 0.9999997 0.0004273378 6.232660e-04 #>  [5,] 1 0.9999997 0.0001641240 7.931405e-04 #>  [6,] 1 0.9999998 0.0002083324 5.399969e-04 #>  [7,] 1 0.9999996 0.0008381737 3.110116e-04 #>  [8,] 1 0.9999998 0.0004718729 4.373223e-04 #>  [9,] 1 0.9999997 0.0001212845 7.378029e-04 #> [10,] 1 0.9999998 0.0005389126 3.624766e-04   ## mirror ball: jj <- matrix(rnorm(30),10,3) disco <- sweep(matrix(rnorm(30),10,3),1,sqrt(rowSums(jj^2)),`/`) p <- as.photon(c(1,0,0)) reflect(p,disco) #>   E        p_x         p_y         p_z #> x 1 -0.8886451 -0.27480408 -0.36714122 #> x 1 -0.4222800  0.90605946  0.02712698 #> x 1  0.9221608  0.18359751 -0.34045774 #> x 1  0.9085613  0.27599266 -0.31359923 #> x 1 -0.9560678  0.18453128  0.22777758 #> x 1 -0.1795134  0.48210125  0.85752744 #> x 1  0.1848001 -0.74049783  0.64615161 #> x 1  0.3042441  0.95200552  0.03348154 #> x 1  0.9807499  0.02057218  0.19418136 #> x 1  0.9115894  0.28049293 -0.30054683  table(reflect(p,disco)[,2]>0) # should be TRUE with probability sqrt(0.5) #>  #> FALSE  TRUE  #>     4     6   ## relativistic  disco; mirror ball moves at 0.5c:  B <- boost(as.3vel(c(0.5,0,0))) p |> tcrossprod(B) |> reflect(disco) |> tcrossprod(solve(B)) #>           t           x           y           z #> x 0.3704516 -0.25909671 -0.15865821 -0.21196908 #> x 0.5259067  0.05181334  0.52311367  0.01566177 #> x 0.9740536  0.94810718  0.10600007 -0.19656337 #> x 0.9695204  0.93904084  0.15934443 -0.18105660 #> x 0.3479774 -0.30404518  0.10653918  0.13150745 #> x 0.6068289  0.21365771  0.27834129  0.49509370 #> x 0.7282667  0.45653338 -0.42752662  0.37305581 #> x 0.7680814  0.53616274  0.54964064  0.01933058 #> x 0.9935833  0.98716661  0.01187735  0.11211066 #> x 0.9705298  0.94105963  0.16194267 -0.17352079"},{"path":"https://robinhankin.github.io/lorentz/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for three-velocities and four-velocities — print.3vel","title":"Print methods for three-velocities and four-velocities — print.3vel","text":"Print methods three-velocities","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for three-velocities and four-velocities — print.3vel","text":"","code":"# S3 method for 3vel print(x, ...) # S3 method for 3cel print(x, ...) # S3 method for 4vel print(x, ...) # S3 method for 4mom print(x, ...)"},{"path":"https://robinhankin.github.io/lorentz/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for three-velocities and four-velocities — print.3vel","text":"x Vector three-velocities ... arguments, currently ignored","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for three-velocities and four-velocities — print.3vel","text":"Returns vector three-velocities","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/print.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print methods for three-velocities and four-velocities — print.3vel","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for three-velocities and four-velocities — print.3vel","text":"","code":"r3vel(10) #> A vector of three-velocities (speed of light = 1) #>                 x          y           z #>  [1,] -0.01125227 -0.3272936  0.36790932 #>  [2,]  0.08310597 -0.1783084  0.51396315 #>  [3,]  0.61851998 -0.4319054  0.03156631 #>  [4,]  0.02752097  0.3040410 -0.68252904 #>  [5,] -0.86045997  0.2557130 -0.25923519 #>  [6,]  0.44097149  0.7031767  0.44251006 #>  [7,] -0.08253849  0.9108485  0.19807859 #>  [8,] -0.04637708 -0.1904081 -0.60435634 #>  [9,]  0.01350433 -0.2471276 -0.35227388 #> [10,]  0.47226867 -0.6281318  0.31584395"},{"path":"https://robinhankin.github.io/lorentz/reference/r3vel.html","id":null,"dir":"Reference","previous_headings":"","what":"Random relativstic velocities — r3vel","title":"Random relativstic velocities — r3vel","text":"Generates random three-velocities four-velocities, optionally specifiying magnitude","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/r3vel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random relativstic velocities — r3vel","text":"","code":"r3vel(n=7, r = NA) r4vel(...) rboost(r = NA)"},{"path":"https://robinhankin.github.io/lorentz/reference/r3vel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random relativstic velocities — r3vel","text":"n Number three- four- velocities generate r Absolute value three-velocities, default     NA meaning sample uniformly unit ball ... Arguments passed r3vel()","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/r3vel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random relativstic velocities — r3vel","text":"Function r3vel() returns random three-velocity.  Function   r4vel() convenience wrapper .4vel(r3vel()). Function rboost() returns random \\(4\\times 4\\) Lorentz   boost matrix, drawn connected component.  given   r=0, transform corresponding random rotation   returned.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/r3vel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random relativstic velocities — r3vel","text":"Returns vector three- four- velocities.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/r3vel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random relativstic velocities — r3vel","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/r3vel.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Random relativstic velocities — r3vel","text":"speed light infinite, functions require specified   argument r. entirely trivial sample uniformly unit ball   unit sphere, hard either.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/r3vel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random relativstic velocities — r3vel","text":"","code":"r3vel() #> A vector of three-velocities (speed of light = 1) #>                x           y          z #> [1,]  0.60183483  0.52060479 -0.4385152 #> [2,]  0.62372720  0.07529129  0.3703151 #> [3,] -0.01363138 -0.32458258  0.7967643 #> [4,] -0.12940438 -0.26508062 -0.7820040 #> [5,] -0.06258182  0.49012766  0.1912816 #> [6,] -0.30808048  0.28203706  0.6242827 #> [7,] -0.75065170 -0.47826958 -0.1015613  a <- r3vel(10000) b <- r3vel(1000,0.8) u <- as.3vel(c(0,0,0.9))  pairs(unclass(u+a),asp=1)  pairs(unclass(a+u),asp=1)   is.consistent.boost(rboost()) #> [1] TRUE  sol(299792458)    # switch to SI units #> [1] 299792458 sound <- 343      # speed of sound in metres per second r3vel(100,343)    # random 3-velocities with speed = 343 m/s #> A vector of three-velocities (speed of light = 299792458) #>                  x           y          z #>   [1,]  -35.417422 -337.859682  -47.38609 #>   [2,]  -38.166413 -333.314583   71.37026 #>   [3,] -142.677440  308.462063  -46.29583 #>   [4,]  147.920673 -167.463293  260.23935 #>   [5,] -152.381285 -118.435754 -283.55232 #>   [6,] -327.160748   -9.343730 -102.60380 #>   [7,]  -35.444390  293.416571 -174.06726 #>   [8,] -133.509168  156.583495 -274.41922 #>   [9,]   -7.076524 -341.985547  -25.39308 #>  [10,]  -44.923889 -316.683845  123.86358 #>  [11,] -281.994504 -194.424014  -18.09427 #>  [12,]  104.455874 -247.464523  213.30560 #>  [13,]  105.919655  103.521195  309.37581 #>  [14,]  174.899998 -293.147033   33.52324 #>  [15,]  205.856998   22.314303  273.44829 #>  [16,]  252.176949 -229.651334   36.27742 #>  [17,]  264.749303  -91.672149  197.87123 #>  [18,]  162.989294   46.456005  298.20350 #>  [19,] -134.112449   69.117265  308.03515 #>  [20,]  166.586526  -92.762779  285.11927 #>  [21,] -245.284623 -230.784050   64.98597 #>  [22,]   84.862823 -330.622257  -33.70793 #>  [23,] -300.265217  151.863995  -66.53666 #>  [24,] -133.872282  -60.686033  309.91034 #>  [25,]  209.175372 -217.297422 -163.32940 #>  [26,]   11.732671  246.952928  237.75112 #>  [27,] -216.805559    8.826985 -265.64343 #>  [28,]  111.155868 -164.980700  279.41858 #>  [29,] -214.673025 -150.863299  220.91799 #>  [30,]  -14.248695 -341.845823  -24.23649 #>  [31,]  197.717135  277.889200  -36.53118 #>  [32,]  314.523253   77.258584 -112.93907 #>  [33,]    1.357188 -301.270497 -163.96111 #>  [34,]  312.563373 -132.552589   48.81546 #>  [35,]  -77.819777  217.512304  253.53793 #>  [36,]  -63.574704  277.070918 -191.93479 #>  [37,]   51.509300 -212.798428  264.03148 #>  [38,]  -43.621640  269.668795  207.42443 #>  [39,]  216.118783  149.400954 -220.50176 #>  [40,] -202.946236 -198.207254  192.81004 #>  [41,] -219.414203 -247.144697  -91.79274 #>  [42,]   -1.182113 -176.698688 -293.98159 #>  [43,] -115.651314 -318.621914   52.47714 #>  [44,]  178.692441 -276.501376  -96.25487 #>  [45,] -195.831652 -182.019336 -214.86723 #>  [46,] -321.774881  101.747388   61.29759 #>  [47,]  215.378274 -257.563025  -70.16044 #>  [48,]  237.136246  232.104514  -86.84984 #>  [49,]  187.093374 -278.249624  -72.26490 #>  [50,] -305.677618 -128.688073   87.46184 #>  [51,] -135.944170  100.750579 -298.35801 #>  [52,]  -28.429385  157.289269  303.48123 #>  [53,]  -57.938775  227.891609  249.71486 #>  [54,] -319.162767  -80.759544  -96.23941 #>  [55,]   58.412930  334.696539   47.06545 #>  [56,]    3.656653  116.973491 -322.41717 #>  [57,] -331.931075  -84.428953  -18.50711 #>  [58,]  -80.022661  106.950029 -315.92256 #>  [59,] -336.674695   65.265799    6.28691 #>  [60,]   15.859314   53.538693 -338.42442 #>  [61,]  198.579098  159.554024 -229.69078 #>  [62,] -165.967188 -247.220328 -170.25276 #>  [63,] -210.868214 -250.897350  101.16381 #>  [64,]  -91.662802  329.980561   18.96734 #>  [65,]   41.914536 -113.999867 -320.77438 #>  [66,]  166.060428 -289.853628  -77.83193 #>  [67,]  273.694781  -67.002680 -195.57814 #>  [68,]  -47.813259 -308.760125  141.52766 #>  [69,] -140.079215  307.694057   57.88939 #>  [70,]  306.174393 -151.649341   30.14495 #>  [71,]   65.107421  336.326597  -17.15937 #>  [72,]  240.732303 -244.185053    8.40346 #>  [73,]  -45.542810  130.018008 -314.11808 #>  [74,]  291.008941 -154.195884   95.84584 #>  [75,] -245.731677 -231.115169  -62.05418 #>  [76,] -103.182104  105.427730 -309.65698 #>  [77,] -164.142880  295.227674   59.55448 #>  [78,]  183.289004  183.172240  224.72666 #>  [79,]  270.728108  132.502285  163.70228 #>  [80,]    9.867101   92.252140 -330.21384 #>  [81,]  267.796412  170.910753 -129.31974 #>  [82,] -106.082674  290.064300  149.19172 #>  [83,]   64.251942 -301.839449 -149.71184 #>  [84,]  -66.476494 -120.936130 -314.01326 #>  [85,] -211.181897  269.182287   24.33317 #>  [86,]   -8.301607 -273.867613 -206.34101 #>  [87,] -206.916875  240.008820 -131.26375 #>  [88,]   38.675452  -57.936921  335.85194 #>  [89,] -241.851111  234.858936   63.23227 #>  [90,]    9.903480 -331.721053  -86.67217 #>  [91,]   47.849683  210.110248 -266.85781 #>  [92,]   45.110386 -189.517618 -282.30679 #>  [93,] -176.873394  287.765029   59.63297 #>  [94,]  312.263532 -135.674590   41.62802 #>  [95,] -228.107772   83.103030  242.30091 #>  [96,]  156.866182 -228.392593  202.18512 #>  [97,]  -18.466047  327.758666   99.40957 #>  [98,]  152.241957 -100.304575 -290.53464 #>  [99,]   95.706134   -3.658734  329.35687 #> [100,]   54.120941  308.807441  139.13263  sol(1)   # return to default c=1 #> [1] 1"},{"path":"https://robinhankin.github.io/lorentz/reference/reflect.html","id":null,"dir":"Reference","previous_headings":"","what":"Mirrors — reflect","title":"Mirrors — reflect","text":"Plane mirrors special relativity","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/reflect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mirrors — reflect","text":"","code":"reflect(P,m,ref=1)"},{"path":"https://robinhankin.github.io/lorentz/reference/reflect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mirrors — reflect","text":"P Vector four-momenta m Orientation mirror, expressed three-vector ref Coefficient reflectivity mirror","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/reflect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mirrors — reflect","text":"Takes four-momentum returns four-momentum reflection.   handle objects photons.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/reflect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mirrors — reflect","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/lorentz/reference/reflect.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Mirrors — reflect","text":"four-momenta measured rest frame mirror,   easy reflect moving mirrors; see examples. However, note ref argument designed work   photons , conceptually percentage photons   reflected absorbed mirror.  ref less   unity, odd results given four momenta nonzero restmass   objects.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/reflect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mirrors — reflect","text":"","code":"## We will reflect some photons from an oblique mirror moving at half ## the speed of light.  ## First create 'A', a bunch of photons all moving roughly along the x-axis: A <- as.photon(as.3vel(cbind(0.9,runif(10)/1000,runif(10)/1000)))  ## Now create 'm', a mirror oriented perpendicular to c(1,1,1): m <- c(1,1,1)  ## Reflect the photons in the mirror: reflect(A,m) #>       E       p_x        p_y        p_z #>  [1,] 1 0.3328826 -0.6668622 -0.6666963 #>  [2,] 1 0.3326308 -0.6666592 -0.6670249 #>  [3,] 1 0.3326578 -0.6663731 -0.6672973 #>  [4,] 1 0.3323522 -0.6668339 -0.6669892 #>  [5,] 1 0.3321269 -0.6667971 -0.6671382 #>  [6,] 1 0.3321600 -0.6669365 -0.6669823 #>  [7,] 1 0.3322738 -0.6670345 -0.6668276 #>  [8,] 1 0.3327615 -0.6671480 -0.6664708 #>  [9,] 1 0.3322613 -0.6668448 -0.6670236 #> [10,] 1 0.3329422 -0.6668943 -0.6666344  ## Reflect the photons in a series of mirrors: A |> reflect(m) |> reflect(1:3) |> reflect(3:1)  #>       E        p_x        p_y       p_z #>  [1,] 1 -0.6463863 -0.7481023 0.1500925 #>  [2,] 1 -0.6467378 -0.7478074 0.1500474 #>  [3,] 1 -0.6469764 -0.7476568 0.1497695 #>  [4,] 1 -0.6467684 -0.7477174 0.1503642 #>  [5,] 1 -0.6469527 -0.7475393 0.1504570 #>  [6,] 1 -0.6468053 -0.7476448 0.1505664 #>  [7,] 1 -0.6466408 -0.7477818 0.1505925 #>  [8,] 1 -0.6462110 -0.7481874 0.1504229 #>  [9,] 1 -0.6468196 -0.7476608 0.1504253 #> [10,] 1 -0.6463173 -0.7481626 0.1500884   ## To reflect from a moving mirror we need to transform to a frame in ## which the mirror is at rest, then transform back to the original ## frame.  First create B, a boost representing the mirror's movement ## along the x-axis at speed c/2:  B <- boost(as.3vel(c(0.5,0,0)))   ## Transform to the mirror's rest frame: A %*% t(B)     #>               t         x            y            z #>  [1,] 0.5773503 0.5773501 2.550344e-04 4.210082e-04 #>  [2,] 0.5773504 0.5773499 7.096003e-04 3.439767e-04 #>  [3,] 0.5773505 0.5773497 9.686163e-04 4.443105e-05 #>  [4,] 0.5773506 0.5773496 8.134356e-04 6.580465e-04 #>  [5,] 0.5773508 0.5773493 1.075201e-03 7.340772e-04 #>  [6,] 0.5773507 0.5773494 9.027374e-04 8.569164e-04 #>  [7,] 0.5773506 0.5773495 6.910257e-04 8.979545e-04 #>  [8,] 0.5773504 0.5773499 9.023486e-05 7.673546e-04 #>  [9,] 0.5773506 0.5773495 8.932565e-04 7.145029e-04 #> [10,] 0.5773503 0.5773502 1.633693e-04 4.232455e-04  ## NB: in the above, take a transpose because the *rows* of A are 4-vectors.  ## Then reflect the photons in the mirror: reflect(A %*% t(B),m) #>               E       p_x        p_y        p_z #>  [1,] 0.5773503 0.1919993 -0.3850957 -0.3849298 #>  [2,] 0.5773504 0.1917476 -0.3848927 -0.3852583 #>  [3,] 0.5773505 0.1917745 -0.3846066 -0.3855308 #>  [4,] 0.5773506 0.1914689 -0.3850673 -0.3852227 #>  [5,] 0.5773508 0.1912436 -0.3850305 -0.3853716 #>  [6,] 0.5773507 0.1912767 -0.3851699 -0.3852158 #>  [7,] 0.5773506 0.1913905 -0.3852680 -0.3850611 #>  [8,] 0.5773504 0.1918782 -0.3853814 -0.3847043 #>  [9,] 0.5773506 0.1913780 -0.3850783 -0.3852570 #> [10,] 0.5773503 0.1920590 -0.3851278 -0.3848679   ## Now transform back to the original rest frame (NB: active transform): A |> tcrossprod(B) |> reflect(m) |> tcrossprod(solve(B)) #>               t         x          y          z #>  [1,] 0.7775176 0.5550351 -0.3850957 -0.3849298 #>  [2,] 0.7773724 0.5547445 -0.3848927 -0.3852583 #>  [3,] 0.7773881 0.5547757 -0.3846066 -0.3855308 #>  [4,] 0.7772116 0.5544227 -0.3850673 -0.3852227 #>  [5,] 0.7770818 0.5541627 -0.3850305 -0.3853716 #>  [6,] 0.7771008 0.5542009 -0.3851699 -0.3852158 #>  [7,] 0.7771665 0.5543323 -0.3852680 -0.3850611 #>  [8,] 0.7774478 0.5548953 -0.3853814 -0.3847043 #>  [9,] 0.7771592 0.5543178 -0.3850783 -0.3852570 #> [10,] 0.7775520 0.5551040 -0.3851278 -0.3848679"},{"path":"https://robinhankin.github.io/lorentz/reference/seq.html","id":null,"dir":"Reference","previous_headings":"","what":"seq method for three velocities — seq.3vel","title":"seq method for three velocities — seq.3vel","text":"Simplified version seq() three-velocities.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"seq method for three velocities — seq.3vel","text":"","code":"# S3 method for 3vel seq(from, to, len, ...)"},{"path":"https://robinhankin.github.io/lorentz/reference/seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"seq method for three velocities — seq.3vel","text":",Start end sequence len Length vector returned ... arguments (currently ignored)","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"seq method for three velocities — seq.3vel","text":"seq(,b,n) returns + t*(-b+) t   numeric vector seq(=0,=1,len=n). definition one several plausible alternatives,   nice property first last elements exactly equal   b respectively.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/seq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"seq method for three velocities — seq.3vel","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"seq method for three velocities — seq.3vel","text":"","code":"a <- as.3vel(c(4,5,6)/9) b <- as.3vel(c(-5,6,8)/14) x <- seq(a,b,len=9)  x[1]-a # should be zero #> A vector of three-velocities (speed of light = 1) #>      x y z #> [1,] 0 0 0 x[9]-b # should be zero #> A vector of three-velocities (speed of light = 1) #>                x             y             z #> [1,] 2.22201e-15 -8.428313e-16 -1.072694e-15   jj <- a + seq(0,1,len=9)*(b-a)  jj-x   # decidedly non-zero #> A vector of three-velocities (speed of light = 1) #>                 x         y         z #>  [1,]  0.00000000 0.0000000 0.0000000 #>  [2,] -0.04838804 0.1181117 0.1533975 #>  [3,] -0.03232101 0.2418630 0.3086692 #>  [4,]  0.03217792 0.3559577 0.4477686 #>  [5,]  0.11675360 0.4488587 0.5584128 #>  [6,]  0.19150356 0.5159410 0.6371904 #>  [7,]  0.23782735 0.5594566 0.6884694 #>  [8,]  0.25335939 0.5854552 0.7200976 #>  [9,]  0.24656019 0.6002548 0.7393787"},{"path":"https://robinhankin.github.io/lorentz/reference/set.html","id":null,"dir":"Reference","previous_headings":"","what":"The energy-momentum tensor — transform","title":"The energy-momentum tensor — transform","text":"Various functionality deal stress-energy tensor   special relativity.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The energy-momentum tensor — transform","text":"","code":"perfectfluid(rho,p,u=0) dust(rho,u=0) photongas(rho,u=0) transform_dd(TT, B) transform_ud(TT, B) transform_uu(TT, B) raise(TT) lower(TT)"},{"path":"https://robinhankin.github.io/lorentz/reference/set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The energy-momentum tensor — transform","text":"TT second-rank tensor indices either     downstairs-downstairs, downstairs-upstairs, upstairs-upstairs B boost matrix rho,p,u Density, pressure, four-velocity dust","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The energy-momentum tensor — transform","text":"Function perfectfluid() returns stress-energy tensor,   two upstairs indices, perfect fluid conditions   specified.  checking physical reasonableness (eg weak   energy condition) performed: caveat emptor! Function dust() (trivial) function returns   stress-energy tensor zero-pressure perfect fluid (, dust).   Function photongas() returns stress-energy tensor   photon gas.  discoverability reasons;   special cases perfect fluid. Functions transform_dd() et seq transform second-rank tensor   using Lorentz transform.  letters “u” “d”   denote indices tensor upstairs (contravariant)   downstairs (covariant).  stress-energy tensor usually written   two upstairs indices, use transform_uu() transform   . Function lower() lowers indices tensor two   upstairs indices.  Function raise() raises two downstairs   indices.  two functions identical R idiom return   identical values \\(c\\neq 1\\).","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/set.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The energy-momentum tensor — transform","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The energy-momentum tensor — transform","text":"","code":"perfectfluid(10,1) #>    t x y z #> t 10 0 0 0 #> x  0 1 0 0 #> y  0 0 1 0 #> z  0 0 0 1  u <- as.3vel(c(0.4,0.4,0.2))  ## In the following, LHS is stationary dust and RHS is dust moving at ## velocity 'u', but transformed to a frame also moving at velocity 'u':  LHS <- dust(1) RHS <- transform_uu(dust(1,u),boost(u)) max(abs(LHS-RHS))  # should be small #> [1] 6.938894e-17   ## In the following, negative sign needed because active/passive ## difference:  LHS <- dust(1,u) RHS <- transform_uu(dust(1),boost(-u)) max(abs(LHS-RHS))  # should be small #> [1] 0  ## Now test behaviour when  c!=1:   sol(299792458) #> [1] 299792458 perfectfluid(1.225,101325) # air at STP #>       t            x            y            z #> t 1.225 0.000000e+00 0.000000e+00 0.000000e+00 #> x 0.000 1.127393e-12 0.000000e+00 0.000000e+00 #> y 0.000 0.000000e+00 1.127393e-12 0.000000e+00 #> z 0.000 0.000000e+00 0.000000e+00 1.127393e-12  LHS <- transform_uu(perfectfluid(1.225,101325),boost(as.3vel(c(1000,0,0)))) RHS <- perfectfluid(1.225,101325)  LHS-RHS  # should be small #>               t       x y z #> t  1.362999e-11   -1225 0 0 #> x -1.225000e+03 1225000 0 0 #> y  0.000000e+00       0 0 0 #> z  0.000000e+00       0 0 0  sol(10) #> [1] 10 u <- as.3vel(4:6) LHS <- photongas(1,u) RHS <- transform_uu(photongas(1),boost(-u)) LHS-RHS # should be small #>               t             x             y             z #> t -8.881784e-16 -3.552714e-15  3.552714e-15  0.000000e+00 #> x -3.552714e-15  0.000000e+00  1.421085e-14  0.000000e+00 #> y  3.552714e-15  1.421085e-14  1.421085e-14 -2.842171e-14 #> z  0.000000e+00  0.000000e+00 -2.842171e-14 -2.842171e-14    B1 <- boost(r3vel(1)) %*% boost(r3vel(1)) B2 <- boost(r3vel(1)) %*% boost(r3vel(1)) LHS <- transform_uu(transform_uu(dust(1),B1),B2) RHS <- transform_uu(dust(1),B2 %*% B1)   # note order LHS-RHS  # should be small #>               t             x             y             z #> t -2.842171e-14  2.273737e-13 -2.273737e-13  2.273737e-13 #> x  0.000000e+00  0.000000e+00  1.818989e-12 -9.094947e-13 #> y  0.000000e+00  0.000000e+00  0.000000e+00  9.094947e-13 #> z  1.136868e-13 -9.094947e-13  9.094947e-13 -6.821210e-13   ## remember to re-set c: sol(1) #> [1] 1"},{"path":"https://robinhankin.github.io/lorentz/reference/sol.html","id":null,"dir":"Reference","previous_headings":"","what":"Speed of light and Minkowski metric — sol","title":"Speed of light and Minkowski metric — sol","text":"Getting setting speed light","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/sol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speed of light and Minkowski metric — sol","text":"","code":"sol(c) eta(downstairs=TRUE) ptm(to_natural=TRUE, change_time=TRUE)"},{"path":"https://robinhankin.github.io/lorentz/reference/sol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Speed of light and Minkowski metric — sol","text":"c Scalar, speed light.  missing, return speed     light downstairs Boolean, default TRUE meaning return     covariant metric tensor \\(g_{ij}\\) two downstairs       indices, FALSE meaning return contravariant       version \\(g^{ij}\\) two upstairs indices to_natural,change_time Boolean, specifying       nature passive transform matrix","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/sol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Speed of light and Minkowski metric — sol","text":"context R package, symbol “c” presents   particular problems.  lorentz package, speed light   denoted “sol”, ‘speed light’.  can set   speed light sol(x), query sol(); see   examples.  infinite speed light sometimes useful   Galilean transforms. speed light global variable, governed   options(\"c\").  NULL, define c=1.  Setting   showSOL TRUE makes sol() change prompt   display speed light might useful. Function eta() returns Minkowski flat-space metric   $$\\mathrm{diag}\\left(-c^2,1,1,1\\right).$$ Note top-left element eta() \\(-c^2\\),   \\(-1\\). Function ptm() returns passive transformation matrix   converts displacement vectors natural units   (to_natural=TRUE) natural units   (to_natural=FALSE).  Argument change_time specifies   whether change unit time (TRUE) unit   length (FALSE).","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/sol.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Speed of light and Minkowski metric — sol","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/sol.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Speed of light and Minkowski metric — sol","text":"Typing “sol(299792458)” lot easier typing   “options(\"c\"=299792458)”, package uses   idiom . R-devel discussion options printing, Martin Maechler   makes following observation: “Good programming style   functions according book depend   arguments, global option really (really? think twice!)   influence behavior, arguments function   default determined global option” think right general, offer observation   speed light depends units chosen, typically one fixes   one's units , subsequently change .   indicate (least) global option   appropriate.  , default, \\(c=1\\),   returned sol() option unset.  just   “default”, though: used overwhelming majority   cases.  Indeed, pedagogically speaking, one learning objective   package units \\(c\\neq 1\\) difficult,   awkward, unnatural.  package R code,   place speed light option accessed via   sol().  Similar arguments presented clifford   package signature.Rd.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/sol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Speed of light and Minkowski metric — sol","text":"","code":"sol()                          # returns current speed of light #> [1] 1 sol(299792458)                 # use SI units #> [1] 299792458 sol()                          # speed of light now SI value #> [1] 299792458  eta()                          # note [t,t] term #>               [,1] [,2] [,3] [,4] #> [1,] -8.987552e+16    0    0    0 #> [2,]  0.000000e+00    1    0    0 #> [3,]  0.000000e+00    0    1    0 #> [4,]  0.000000e+00    0    0    1 u <- as.3vel(c(100,200,300))   # fast terrestrial speed, but not relativistic boost(u)                       # boost matrix practically Galilean #>      t             x            y             z #> t    1 -1.112650e-15 -2.22530e-15 -3.337950e-15 #> x -100  1.000000e+00  1.11265e-13  1.668975e-13 #> y -200  1.112650e-13  1.00000e+00  3.337950e-13 #> z -300  1.668975e-13  3.33795e-13  1.000000e+00 is.consistent.boost(boost(u))  # should be TRUE #> [1] TRUE sol(1)                         # revert to relativistic units #> [1] 1"},{"path":"https://robinhankin.github.io/lorentz/reference/threevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Three velocities — threevel","title":"Three velocities — threevel","text":"Create test three-velocities, 3vel objects.","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/threevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Three velocities — threevel","text":"","code":"`3vel`(n) threevel(n) as.3vel(x) is.3vel(x) # S3 method for vec length(x) # S3 method for vec names(x) # S3 method for vec names(x) <- value"},{"path":"https://robinhankin.github.io/lorentz/reference/threevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Three velocities — threevel","text":"n function 3vel(), number three velocities     create x,value Vectors three-velocities","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/threevel.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Three velocities — threevel","text":"Class vel virtual class containing classes 3vel   4vel. Function threevel() convenience wrapper 3vel().","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/threevel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Three velocities — threevel","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/lorentz/reference/threevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Three velocities — threevel","text":"","code":"U <- r4vel(7) as.4vel(as.3vel(U)) # equal to U, to numerical precision #> A vector of four-velocities (speed of light = 1) #>             t          x          y           z #> [1,] 1.294119  0.3479786 -0.1634420 -0.72590697 #> [2,] 2.294493 -0.9828889  0.9042985  1.57507855 #> [3,] 1.794004 -1.2543617  0.3754659 -0.70996767 #> [4,] 1.659213 -0.5941856  0.3822742 -1.11973105 #> [5,] 1.166498 -0.5310856 -0.2780751 -0.03659244 #> [6,] 1.188108  0.4370255 -0.3412057  0.32277986 #> [7,] 1.693540  0.4135550 -0.9133555 -0.92888773  x <- as.3vel(1:3/4) u <- as.3vel(matrix(runif(30)/10,ncol=3))  names(u) <- letters[1:10]  x+u #> A vector of three-velocities (speed of light = 1) #>           x         y         z #> a 0.2554396 0.4931119 0.7640192 #> b 0.2674512 0.5031097 0.7472955 #> c 0.2705066 0.5039356 0.7501768 #> d 0.2698414 0.5048836 0.7534692 #> e 0.2735109 0.4989200 0.7595854 #> f 0.2512011 0.5112765 0.7554425 #> g 0.2531848 0.5064060 0.7595125 #> h 0.2544949 0.5038603 0.7488026 #> i 0.2514363 0.5017563 0.7492571 #> j 0.2491665 0.5098167 0.7504623 u+x  # not equal #> A vector of three-velocities (speed of light = 1) #>           x         y         z #> a 0.2610855 0.4700967 0.7765163 #> b 0.2977561 0.5041437 0.7350377 #> c 0.3054292 0.5027633 0.7374498 #> d 0.3026457 0.5025706 0.7424729 #> e 0.3125881 0.4815117 0.7557344 #> f 0.2479098 0.5220163 0.7491588 #> g 0.2531923 0.5064923 0.7594524 #> h 0.2616519 0.5086678 0.7430636 #> i 0.2537115 0.5042572 0.7468071 #> j 0.2447994 0.5227635 0.7429550"}]
